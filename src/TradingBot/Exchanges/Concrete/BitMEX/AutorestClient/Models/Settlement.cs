// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TradingBot.Exchanges.Concrete.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Historical Settlement Data
    /// </summary>
    public partial class Settlement
    {
        /// <summary>
        /// Initializes a new instance of the Settlement class.
        /// </summary>
        public Settlement()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Settlement class.
        /// </summary>
        public Settlement(System.DateTime timestamp, string symbol, string settlementType = default(string), double? settledPrice = default(double?), double? bankrupt = default(double?), double? taxBase = default(double?), double? taxRate = default(double?))
        {
            Timestamp = timestamp;
            Symbol = symbol;
            SettlementType = settlementType;
            SettledPrice = settledPrice;
            Bankrupt = bankrupt;
            TaxBase = taxBase;
            TaxRate = taxRate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settlementType")]
        public string SettlementType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settledPrice")]
        public double? SettledPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bankrupt")]
        public double? Bankrupt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxBase")]
        public double? TaxBase { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxRate")]
        public double? TaxRate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Symbol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Symbol");
            }
        }
    }
}
