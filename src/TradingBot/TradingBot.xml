<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TradingBot</name>
    </assembly>
    <members>
        <member name="F:TradingBot.Communications.AzureTablePricesPublisher.MaxQueueCount">
            <summary>
            One AzureTable field must be 64k or less. 
            Strings are stored in UTF16 encoding, so maximum number of characters is 32K.
            One serialized entry has size no more then 100 characters.
            </summary>
        </member>
        <member name="M:TradingBot.Communications.StringExtension.RemoveUnsupportedCharacters(System.String)">
            <summary>
            List of unsupported characters is from 
            https://docs.microsoft.com/en-us/rest/api/storageservices/Understanding-the-Table-Service-Data-Model
            </summary>
        </member>
        <member name="M:TradingBot.Controllers.Api.AccountController.GetBalance(System.String)">
            <summary>
            Returns a simple balance for the exchange
            </summary>
            <param name="exchangeName">The exchange name</param>
            <returns></returns>
        </member>
        <member name="M:TradingBot.Controllers.Api.AccountController.GetTradeBalance(System.String)">
            <summary>
            Returns full balance information on the exchange
            </summary>
            <param name="exchangeName">The exchange name</param>
            <returns></returns>
        </member>
        <member name="M:TradingBot.Controllers.Api.ExchangesController.List">
            <summary>
            Get a list of all connected exchanges
            </summary>
            <remarks>The names of available exchanges participates in API calls for exchange-specific methods</remarks>
            <response code="200">An array of strings which are the names of exchanges</response>
        </member>
        <member name="M:TradingBot.Controllers.Api.ExchangesController.Index(System.String)">
            <summary>
            Get information about a specific exchange
            </summary>
            <param name="exchangeName">Name of the specific exchange</param>
            <response code="200">An information about the exchange, such as available trading instruments</response>
            <response code="400">Bad request response is returned in case of specifying name of unavailable exchange</response>
        </member>
        <member name="T:TradingBot.Controllers.Api.IsAliveController">
            <summary>
            Controller to test service is alive.
            </summary>
        </member>
        <member name="M:TradingBot.Controllers.Api.IsAliveController.Get">
            <summary>
            Checks service is alive
            </summary>
        </member>
        <member name="M:TradingBot.Controllers.Api.OrdersController.Index(System.String)">
            <summary>
            Get information about all OPEN orders on the exchange
            <param name="exchangeName">The name of the exchange</param>
            </summary>
        </member>
        <member name="M:TradingBot.Controllers.Api.OrdersController.GetOrder(System.String,System.String,System.String)">
            <summary>
            Get information about earlier placed order
            </summary>
            <param name="id">The order id</param>
            <param name="instrument">The instrument name of the order</param>
            <param name="exchangeName">The exchange name</param>
            <response code="200">The order is found</response>
            <response code="500">The order either not exist or other server error</response>
        </member>
        <member name="M:TradingBot.Controllers.Api.OrdersController.Post(TradingBot.Models.Api.OrderModel)">
             <summary>
             Place a new order to the exchange
            <param name="orderModel">A new order</param>
             </summary>
             <remarks>In the location header of successful response placed an URL for getting info about the order</remarks>
             <response code="200">The order is successfully placed and order status is returned</response>
             <response code="400">Can't place the order. The reason is in the response</response>
        </member>
        <member name="M:TradingBot.Controllers.Api.OrdersController.CancelOrder(System.String,System.String)">
            <summary>
            Cancel existing order
            </summary>
            <remarks></remarks>
            <param name="id">The order id to cancel</param>
            <param name="exchangeName">The exchange name</param>
            <response code="200">The order is successfully canceled</response>
            <response code="400">Can't cancel the order. The reason is in the response</response>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Bitfinex.RestClient.BitfinexApi.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Bitfinex.RestClient.BitfinexApi.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Bitfinex.RestClient.Model.BitfinexOrderStatusPost.OrderId">
            <summary>
            This class can be used to send a cancel message in addition to 
            retrieving the current status of an order.
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI">
             <summary>
             ## REST API for the BitMEX Trading Platform
            
             [View Changelog](/app/apiChangelog)
            
             ----
            
             #### Getting Started
            
            
             ##### Fetching Data
            
             All REST endpoints are documented below. You can try out any query
             right from this interface.
            
             Most table queries accept `count`, `start`, and `reverse` params. Set
             `reverse=true` to get rows newest-first.
            
             Additional documentation regarding filters, timestamps, and
             authentication
             is available in [the main API
             documentation](https://www.bitmex.com/app/restAPI).
            
             *All* table data is available via the [Websocket](/app/wsAPI). We
             highly recommend using the socket if you want
             to have the quickest possible data without being subject to ratelimits.
            
             ##### Return Types
            
             By default, all data is returned as JSON. Send `?_format=csv` to get
             CSV data or `?_format=xml` to get XML data.
            
             ##### Trade Data Queries
            
             *This is only a small subset of what is available, to get you started.*
            
             Fill in the parameters and click the `Try it out!` button to try any of
             these queries.
            
             * [Pricing Data](#!/Quote/Quote_get)
            
             * [Trade Data](#!/Trade/Trade_get)
            
             * [OrderBook Data](#!/OrderBook/OrderBook_getL2)
            
             * [Settlement Data](#!/Settlement/Settlement_get)
            
             * [Exchange Statistics](#!/Stats/Stats_history)
            
             Every function of the BitMEX.com platform is exposed here and
             documented. Many more functions are available.
            
             ##### Swagger Specification
            
             [â‡© Download Swagger JSON](swagger.json)
            
             ----
            
             ## All API Endpoints
            
             Click to expand a section.
            
             </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.Credentials">
            <summary>
            Subscription credentials which uniquely identify client subscription.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the BitMEXAPI class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the BitMEXAPI class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.#ctor(System.Uri,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the BitMEXAPI class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.#ctor(System.Uri,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the BitMEXAPI class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the BitMEXAPI class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the BitMEXAPI class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the BitMEXAPI class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the BitMEXAPI class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.AnnouncementgetWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get site announcements.
            </summary>
            <param name='columns'>
            Array of column names to fetch. If omitted, will return all columns.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.AnnouncementgetUrgentWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get urgent (banner) announcements.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.APIKeynewWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Create a new API Key.
            </summary>
            <remarks>
            API Keys can also be created via [this Python
            script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py)
            See the [API Key Documentation](/app/apiKeys) for more information on
            capabilities.
            </remarks>
            <param name='name'>
            Key name. This name is for reference only.
            </param>
            <param name='cidr'>
            CIDR block to restrict this key to. To restrict to a single address, append
            "/32", e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all
            IPs. Only one block may be set. &lt;a
            href="http://software77.net/cidr-101.html"&gt;More on CIDR blocks&lt;/a&gt;
            </param>
            <param name='permissions'>
            Key Permissions. All keys can read margin and position data. Additional
            permissions must be added. Available: ["order", "orderCancel", "withdraw"].
            </param>
            <param name='enabled'>
            Set to true to enable this key on creation. Otherwise, it must be
            explicitly enabled via /apiKey/enable.
            </param>
            <param name='token'>
            OTP Token (YubiKey, Google Authenticator)
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.APIKeygetWithHttpMessagesAsync(System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your API Keys.
            </summary>
            <param name='reverse'>
            If true, will sort results newest first.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.APIKeyremoveWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Remove an API Key.
            </summary>
            <param name='apiKeyID'>
            API Key ID (public component).
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.APIKeydisableWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Disable an API Key.
            </summary>
            <param name='apiKeyID'>
            API Key ID (public component).
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.APIKeyenableWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Enable an API Key.
            </summary>
            <param name='apiKeyID'>
            API Key ID (public component).
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.ChatgetWithHttpMessagesAsync(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get chat messages.
            </summary>
            <param name='count'>
            Number of results to fetch.
            </param>
            <param name='start'>
            Starting ID for results.
            </param>
            <param name='reverse'>
            If true, will sort results newest first.
            </param>
            <param name='channelID'>
            Channel id. GET /chat/channels for ids. Leave blank for all.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.ChatnewWithHttpMessagesAsync(System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Send a chat message.
            </summary>
            <param name='message'>
            </param>
            <param name='channelID'>
            Channel to post to. Default 1 (English).
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.ChatgetChannelsWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get available channels.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.ChatgetConnectedWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get connected users.
            </summary>
            <remarks>
            Returns an array with browser users in the first position and API users
            (bots) in the second position.
            </remarks>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.ExecutiongetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get all raw executions for your account.
             </summary>
             <remarks>
             This returns all raw transactions, which includes order opening and
             cancelation, and order status
             changes. It can be quite noisy. More focused information is available at
             `/execution/tradeHistory`.
            
             You may also use the `filter` param to target your query. Specify an array
             as a filter value, such as
             `{"execType": ["Settlement", "Trade"]}` to filter on multiple values.
            
             See [the FIX
             Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html) for
             explanations of these fields.
            
             </remarks>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.ExecutiongetTradeHistoryWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get all balance-affecting executions. This includes each trade, insurance
             charge, and settlement.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.FundinggetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get funding history.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.InstrumentgetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get instruments.
             </summary>
             <remarks>
             This returns all instruments and indices, including those that have settled
             or are unlisted. Use this endpoint if you want to query for individual
             instruments or use a complex filter. Use `/instrument/active` to return
             active instruments, or use a filter like `{"state": "Open"}`.
             </remarks>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.InstrumentgetActiveWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get all active instruments and instruments that have expired in &lt;24hrs.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.InstrumentgetIndicesWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get all price indices.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.InstrumentgetActiveAndIndicesWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Helper method. Gets all active instruments and all indices. This is a join
            of the result of /indices and /active.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.InstrumentgetActiveIntervalsWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Return all active contract series and interval pairs.
            </summary>
            <remarks>
            This endpoint is useful for determining which pairs are live. It returns
            two arrays of   strings. The first is intervals, such as `["BVOL:daily",
            "BVOL:weekly", "XBU:daily", "XBU:monthly", ...]`. These identifiers are
            usable in any query's `symbol` param. The second array is the current
            resolution of these intervals. Results are mapped at the same index.
            </remarks>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.InstrumentgetCompositeIndexWithHttpMessagesAsync(System.Nullable{System.Double},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Show constituent parts of an index.
             </summary>
             <remarks>
             Composite indices are built from multiple external price sources.
            
             Use this endpoint to get the underlying prices of an index. For example,
             send a `symbol` of `.XBT` to
             get the ticks and weights of the constituent exchanges that build the
             ".XBT" index.
            
             A tick with reference `"BMI"` and weight `null` is the composite index
             tick.
            
             </remarks>
             <param name='account'>
             </param>
             <param name='symbol'>
             The composite index symbol.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.InsurancegetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get insurance fund history.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.LeaderboardgetWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get current leaderboard.
            </summary>
            <param name='method'>
            Ranking type. Options: "notional", "ROE"
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.LiquidationgetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get liquidation orders.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.NotificationgetWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your current notifications.
            </summary>
            <remarks>
            This is an upcoming feature and currently does not return data.
            </remarks>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrdergetOrdersWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get your orders.
             </summary>
             <remarks>
             To get open orders only, send {"open": true} in the filter param.
            
             See &lt;a
             href="http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html"&gt;the
             FIX Spec&lt;/a&gt; for explanations of these fields.
             </remarks>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrdernewWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create a new order.
             </summary>
             <remarks>
             ## Placing Orders
            
             This endpoint is used for placing orders. See individual fields below for
             more details on their use.
            
             #### Order Types
            
             All orders require a `symbol`. All other fields are optional except when
             otherwise specified.
            
             These are the valid `ordType`s:
            
             * **Limit**: The default order type. Specify an `orderQty` and `price`.
             * **Market**: A traditional Market order. A Market order will execute until
             filled or your bankruptcy price is reached, at
             which point it will cancel.
             * **MarketWithLeftOverAsLimit**: A market order that, after eating through
             the order book as far as
             permitted by available margin, will become a limit order. The difference
             between this type and `Market` only
             affects the behavior in thin books. Upon reaching the deepest possible
             price, if there is quantity left over,
             a `Market` order will cancel the remaining quantity.
             `MarketWithLeftOverAsLimit` will keep the remaining
             quantity in the books as a `Limit`.
             * **Stop**: A Stop Market order. Specify an `orderQty` and `stopPx`. When
             the `stopPx` is reached, the order will be entered
             into the book.
             * On sell orders, the order will trigger if the triggering price is lower
             than the `stopPx`. On buys, higher.
             * Note: Stop orders do not consume margin until triggered. Be sure that the
             required margin is available in your
             account so that it may trigger fully.
             * `Close` Stops don't require an `orderQty`. See Execution Instructions
             below.
             * **StopLimit**: Like a Stop Market, but enters a Limit order instead of a
             Market order. Specify an `orderQty`, `stopPx`,
             and `price`.
             * **MarketIfTouched**: Similar to a Stop, but triggers are done in the
             opposite direction. Useful for Take Profit orders.
             * **LimitIfTouched**: As above; use for Take Profit Limit orders.
            
             #### Execution Instructions
            
             The following `execInst`s are supported. If using multiple, separate with a
             comma (e.g. `LastPrice,Close`).
            
             * **ParticipateDoNotInitiate**: Also known as a Post-Only order. If this
             order would have executed on placement,
             it will cancel instead.
             * **AllOrNone**: Valid only for hidden orders (`displayQty: 0`). Use to
             only execute if the entire order would fill.
             * **MarkPrice, LastPrice, IndexPrice**: Used by stop and if-touched orders
             to determine the triggering price.
             Use only one. By default, `'MarkPrice'` is used. Also used for Pegged
             orders to define the value of `'LastPeg'`.
             * **ReduceOnly**: A `'ReduceOnly'` order can only reduce your position, not
             increase it. If you have a `'ReduceOnly'`
             limit order that rests in the order book while the position is reduced by
             other orders, then its order quantity will
             be amended down or canceled. If there are multiple `'ReduceOnly'` orders
             the least agresssive will be amended first.
             * **Close**: `'Close'` implies `'ReduceOnly'`. A `'Close'` order will
             cancel other active limit orders with the same side
             and symbol if the open quantity exceeds the current position. This is
             useful for stops: by canceling these orders, a
             `'Close'` Stop is ensured to have the margin required to execute, and can
             only execute up to the full size of your
             position. If not specified, a `'Close'` order has an `orderQty` equal to
             your current position's size.
            
             #### Linked Orders
            
             Linked Orders are an advanced capability. It is very powerful, but its use
             requires careful coding and testing.
             Please follow this document carefully and use the [Testnet
             Exchange](https://testnet.bitmex.com) while developing.
            
             BitMEX offers four advanced Linked Order types:
            
             * **OCO**: *One Cancels the Other*. A very flexible version of the standard
             Stop / Take Profit technique.
             Multiple orders may be linked together using a single `clOrdLinkID`. Send a
             `contingencyType` of
             `OneCancelsTheOther` on the orders. The first order that fully or partially
             executes (or activates
             for `Stop` orders) will cancel all other orders with the same
             `clOrdLinkID`.
             * **OTO**: *One Triggers the Other*. Send a `contingencyType` of
             `'OneTriggersTheOther'` on the primary order and
             then subsequent orders with the same `clOrdLinkID` will be not be triggered
             until the primary order fully executes.
             * **OUOA**: *One Updates the Other Absolute*. Send a `contingencyType` of
             `'OneUpdatesTheOtherAbsolute'` on the orders. Then
             as one order has a execution, other orders with the same `clOrdLinkID` will
             have their order quantity amended
             down by the execution quantity.
             * **OUOP**: *One Updates the Other Proportional*. Send a `contingencyType`
             of `'OneUpdatesTheOtherProportional'` on the orders. Then
             as one order has a execution, other orders with the same `clOrdLinkID` will
             have their order quantity reduced proportionally
             by the fill percentage.
            
             #### Trailing Stops
            
             You may use `pegPriceType` of `'TrailingStopPeg'` to create Trailing Stops.
             The pegged `stopPx` will move as the market
             moves away from the peg, and freeze as the market moves toward it.
            
             To use, combine with `pegOffsetValue` to set the `stopPx` of your order.
             The peg is set to the triggering price
             specified in the `execInst` (default `'MarkPrice'`). Use a negative offset
             for stop-sell and buy-if-touched orders.
            
             Requires `ordType`: `'Stop', 'StopLimit', 'MarketIfTouched',
             'LimitIfTouched'`.
            
             #### Simple Quantities
            
             Send a `simpleOrderQty` instead of an `orderQty` to create an order
             denominated in the underlying currency.
             This is useful for opening up a position with 1 XBT of exposure without
             having to calculate how many contracts it is.
            
             #### Rate Limits
            
             See the [Bulk Order Documentation](#!/Order/Order_newBulk) if you need to
             place multiple orders at the same time.
             Bulk orders require fewer risk checks in the trading engine and thus are
             ratelimited at **1/10** the normal rate.
            
             You can also improve your reactivity to market movements while staying
             under your ratelimit by using the
             [Amend](#!/Order/Order_amend) and [Amend Bulk](#!/Order/Order_amendBulk)
             endpoints. This allows you to stay
             in the market and avoids the cancel/replace cycle.
            
             #### Tracking Your Orders
            
             If you want to keep track of order IDs yourself, set a unique `clOrdID` per
             order.
             This `clOrdID` will come back as a property on the order and any related
             executions (including on the WebSocket),
             and can be used to get or cancel the order. Max length is 36 characters.
            
             </remarks>
             <param name='symbol'>
             Instrument symbol. e.g. 'XBTUSD'.
             </param>
             <param name='side'>
             Order side. Valid options: Buy, Sell. Defaults to 'Buy' unless `orderQty`
             or `simpleOrderQty` is negative.
             </param>
             <param name='simpleOrderQty'>
             Order quantity in units of the underlying instrument (i.e. Bitcoin).
             </param>
             <param name='quantity'>
             Deprecated: use `orderQty`.
             </param>
             <param name='orderQty'>
             Order quantity in units of the instrument (i.e. contracts).
             </param>
             <param name='price'>
             Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched' orders.
             </param>
             <param name='displayQty'>
             Optional quantity to display in the book. Use 0 for a fully hidden order.
             </param>
             <param name='stopPrice'>
             Deprecated: use `stopPx`.
             </param>
             <param name='stopPx'>
             Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched', and
             'LimitIfTouched' orders. Use a price below the current price for stop-sell
             orders and buy-if-touched orders. Use `execInst` of 'MarkPrice' or
             'LastPrice' to define the current price used for triggering.
             </param>
             <param name='clOrdID'>
             Optional Client Order ID. This clOrdID will come back on the order and any
             related executions.
             </param>
             <param name='clOrdLinkID'>
             Optional Client Order Link ID for contingent orders.
             </param>
             <param name='pegOffsetValue'>
             Optional trailing offset from the current price for 'Stop', 'StopLimit',
             'MarketIfTouched', and 'LimitIfTouched' orders; use a negative offset for
             stop-sell orders and buy-if-touched orders. Optional offset from the peg
             price for 'Pegged' orders.
             </param>
             <param name='pegPriceType'>
             Optional peg price type. Valid options: LastPeg, MidPricePeg, MarketPeg,
             PrimaryPeg, TrailingStopPeg.
             </param>
             <param name='type'>
             Deprecated: use `ordType`.
             </param>
             <param name='ordType'>
             Order type. Valid options: Market, Limit, Stop, StopLimit, MarketIfTouched,
             LimitIfTouched, MarketWithLeftOverAsLimit, Pegged. Defaults to 'Limit' when
             `price` is specified. Defaults to 'Stop' when `stopPx` is specified.
             Defaults to 'StopLimit' when `price` and `stopPx` are specified.
             </param>
             <param name='timeInForce'>
             Time in force. Valid options: Day, GoodTillCancel, ImmediateOrCancel,
             FillOrKill. Defaults to 'GoodTillCancel' for 'Limit', 'StopLimit',
             'LimitIfTouched', and 'MarketWithLeftOverAsLimit' orders.
             </param>
             <param name='execInst'>
             Optional execution instructions. Valid options: ParticipateDoNotInitiate,
             AllOrNone, MarkPrice, IndexPrice, LastPrice, Close, ReduceOnly, Fixed.
             'AllOrNone' instruction requires `displayQty` to be 0. 'MarkPrice',
             'IndexPrice' or 'LastPrice' instruction valid for 'Stop', 'StopLimit',
             'MarketIfTouched', and 'LimitIfTouched' orders.
             </param>
             <param name='contingencyType'>
             Optional contingency type for use with `clOrdLinkID`. Valid options:
             OneCancelsTheOther, OneTriggersTheOther, OneUpdatesTheOtherAbsolute,
             OneUpdatesTheOtherProportional.
             </param>
             <param name='text'>
             Optional order annotation. e.g. 'Take profit'.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrderamendWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Amend the quantity or price of an open order.
             </summary>
             <remarks>
             Send an `orderID` or `origClOrdID` to identify the order you wish to amend.
            
             Both order quantity and price can be amended. Only one `qty` field can be
             used to amend.
            
             Use the `leavesQty` field to specify how much of the order you wish to
             remain open. This can be useful
             if you want to adjust your position's delta by a certain amount, regardless
             of how much of the order has
             already filled.
            
             Use the `simpleOrderQty` and `simpleLeavesQty` fields to specify order size
             in Bitcoin, rather than contracts.
             These fields will round up to the nearest contract.
            
             Like order placement, amending can be done in bulk. Simply send a request
             to `PUT /api/v1/order/bulk` with
             a JSON body of the shape: `{"orders": [{...}, {...}]}`, each object
             containing the fields used in this endpoint.
            
             </remarks>
             <param name='orderID'>
             Order ID
             </param>
             <param name='origClOrdID'>
             Client Order ID. See POST /order.
             </param>
             <param name='clOrdID'>
             Optional new Client Order ID, requires `origClOrdID`.
             </param>
             <param name='simpleOrderQty'>
             Optional order quantity in units of the underlying instrument (i.e.
             Bitcoin).
             </param>
             <param name='orderQty'>
             Optional order quantity in units of the instrument (i.e. contracts).
             </param>
             <param name='simpleLeavesQty'>
             Optional leaves quantity in units of the underlying instrument (i.e.
             Bitcoin). Useful for amending partially filled orders.
             </param>
             <param name='leavesQty'>
             Optional leaves quantity in units of the instrument (i.e. contracts).
             Useful for amending partially filled orders.
             </param>
             <param name='price'>
             Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched' orders.
             </param>
             <param name='stopPx'>
             Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched', and
             'LimitIfTouched' orders. Use a price below the current price for stop-sell
             orders and buy-if-touched orders.
             </param>
             <param name='pegOffsetValue'>
             Optional trailing offset from the current price for 'Stop', 'StopLimit',
             'MarketIfTouched', and 'LimitIfTouched' orders; use a negative offset for
             stop-sell orders and buy-if-touched orders. Optional offset from the peg
             price for 'Pegged' orders.
             </param>
             <param name='text'>
             Optional amend annotation. e.g. 'Adjust skew'.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrdercancelWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Cancel order(s). Send multiple order IDs to cancel in bulk.
            </summary>
            <remarks>
            Either an orderID or a clOrdID must be provided.
            </remarks>
            <param name='orderID'>
            Order ID(s).
            </param>
            <param name='clOrdID'>
            Client Order ID(s). See POST /order.
            </param>
            <param name='text'>
            Optional cancellation annotation. e.g. 'Spread Exceeded'.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrdernewBulkWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create multiple new orders for the same symbol.
             </summary>
             <remarks>
             This endpoint is used for placing bulk orders. Valid order types are
             Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched,
             MarketWithLeftOverAsLimit, and Pegged.
            
             Each individual order object in the array should have the same properties
             as an individual POST /order call.
            
             This endpoint is much faster for getting many orders into the book at once.
             Because it reduces load on BitMEX
             systems, this endpoint is ratelimited at `ceil(0.1 * orders)`. Submitting
             10 orders via a bulk order call
             will only count as 1 request, 15 as 2, 32 as 4, and so on.
            
             For now, only `application/json` is supported on this endpoint.
            
             </remarks>
             <param name='orders'>
             An array of orders.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrderamendBulkWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Amend multiple orders for the same symbol.
            </summary>
            <remarks>
            Similar to POST /amend, but with multiple orders. `application/json` only.
            Ratelimited at 50%.
            </remarks>
            <param name='orders'>
            An array of orders.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrderclosePositionWithHttpMessagesAsync(System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Close a position. [Deprecated, use POST /order with execInst: 'Close']
            </summary>
            <remarks>
            If no `price` is specified, a market order will be submitted to close the
            whole of your position. This will also close all other open orders in this
            symbol.
            </remarks>
            <param name='symbol'>
            Symbol of position to close.
            </param>
            <param name='price'>
            Optional limit price.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrdercancelAllWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Cancels all of your orders.
            </summary>
            <param name='symbol'>
            Optional symbol. If provided, only cancels orders for that symbol.
            </param>
            <param name='filter'>
            Optional filter for cancellation. Use to only cancel some orders, e.g.
            `{"side": "Buy"}`.
            </param>
            <param name='text'>
            Optional cancellation annotation. e.g. 'Spread Exceeded'
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrdercancelAllAfterWithHttpMessagesAsync(System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Automatically cancel all your orders after a specified timeout.
             </summary>
             <remarks>
             Useful as a dead-man's switch to ensure your orders are canceled in case of
             an outage.
             If called repeatedly, the existing offset will be canceled and a new one
             will be inserted in its place.
            
             Example usage: call this route at 15s intervals with an offset of 60000
             (60s).
             If this route is not called within 60 seconds, all your orders will be
             automatically canceled.
            
             This is also available via
             [WebSocket](https://www.bitmex.com/app/wsAPI#Dead-Mans-Switch-Auto-Cancel).
            
             </remarks>
             <param name='timeout'>
             Timeout in ms. Set to 0 to cancel this timer.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrderBookgetWithHttpMessagesAsync(System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get current orderbook [deprecated, use /orderBook/L2].
            </summary>
            <param name='symbol'>
            Instrument symbol. Send a series (e.g. XBT) to get data for the nearest
            contract in that series.
            </param>
            <param name='depth'>
            Orderbook depth.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.OrderBookgetL2WithHttpMessagesAsync(System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get current orderbook in vertical format.
            </summary>
            <param name='symbol'>
            Instrument symbol. Send a series (e.g. XBT) to get data for the nearest
            contract in that series.
            </param>
            <param name='depth'>
            Orderbook depth per side. Send 0 for full depth.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.PositiongetWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your positions.
            </summary>
            <remarks>
            See &lt;a
            href="http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html"&gt;the
            FIX Spec&lt;/a&gt; for explanations of these fields.
            </remarks>
            <param name='filter'>
            Table filter. For example, send {"symbol": "XBTUSD"}.
            </param>
            <param name='columns'>
            Which columns to fetch. For example, send ["columnName"].
            </param>
            <param name='count'>
            Number of rows to fetch.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.PositionisolateMarginWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Enable isolated margin or cross margin per-position.
            </summary>
            <remarks>
            Users can switch isolate margin per-position. This function allows
            switching margin isolation (aka fixed margin) on and off.
            </remarks>
            <param name='symbol'>
            Position symbol to isolate.
            </param>
            <param name='enabled'>
            True for isolated margin, false for cross margin.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.PositionupdateRiskLimitWithHttpMessagesAsync(System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update your risk limit.
            </summary>
            <remarks>
            Risk Limits limit the size of positions you can trade at various margin
            levels. Larger positions require more margin. Please see the Risk Limit
            documentation for more details.
            </remarks>
            <param name='symbol'>
            Symbol of position to isolate.
            </param>
            <param name='riskLimit'>
            New Risk Limit, in Satoshis.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.PositiontransferIsolatedMarginWithHttpMessagesAsync(System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Transfer equity in or out of a position.
            </summary>
            <remarks>
            When margin is isolated on a position, use this function to add or remove
            margin from the position. Note that you cannot remove margin below the
            initial margin threshold.
            </remarks>
            <param name='symbol'>
            Symbol of position to isolate.
            </param>
            <param name='amount'>
            Amount to transfer, in Satoshis. May be negative.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.PositionupdateLeverageWithHttpMessagesAsync(System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Choose leverage for a position.
            </summary>
            <remarks>
            Users can choose an isolated leverage. This will automatically enable
            isolated margin.
            </remarks>
            <param name='symbol'>
            Symbol of position to adjust.
            </param>
            <param name='leverage'>
            Leverage value. Send a number between 0.01 and 100 to enable isolated
            margin with a fixed leverage. Send 0 to enable cross margin.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.QuotegetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get Quotes.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.QuotegetBucketedWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get previous quotes in time buckets.
             </summary>
             <param name='binSize'>
             Time interval to bucket by. Available options: [1m,5m,1h,1d].
             </param>
             <param name='partial'>
             If true, will send in-progress (incomplete) bins for the current time
             period.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.SchemagetWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get model schemata for data objects returned by this API.
            </summary>
            <param name='model'>
            Optional model filter. If omitted, will return all models.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.SchemawebsocketHelpWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Returns help text &amp; subject list for websocket usage.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.SettlementgetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get settlement history.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.StatsgetWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get exchange-wide and per-series turnover and volume statistics.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.StatshistoryWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get historical exchange-wide and per-series turnover and volume statistics.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.StatshistoryUSDWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get a summary of exchange statistics in USD.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.TradegetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get Trades.
             </summary>
             <remarks>
             Please note that indices (symbols starting with `.`) post trades at
             intervals to the trade feed. These have a `size` of 0 and are used only to
             indicate a changing price.
            
             See [the FIX
             Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AE_6569.html) for
             explanations of these fields.
             </remarks>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.TradegetBucketedWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get previous trades in time buckets.
             </summary>
             <param name='binSize'>
             Time interval to bucket by. Available options: [1m,5m,1h,1d].
             </param>
             <param name='partial'>
             If true, will send in-progress (incomplete) bins for the current time
             period.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsergetDepositAddressWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get a deposit address.
            </summary>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsergetWalletWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your current wallet information.
            </summary>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsergetWalletHistoryWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get a history of all of your wallet transactions (deposits, withdrawals,
            PNL).
            </summary>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsergetWalletSummaryWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get a summary of all of your wallet transactions (deposits, withdrawals,
            PNL).
            </summary>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UserminWithdrawalFeeWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get the minimum withdrawal fee for a currency.
            </summary>
            <remarks>
            This is changed based on network conditions to ensure timely withdrawals.
            During network congestion, this may be high. The fee is returned in the
            same currency.
            </remarks>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UserrequestWithdrawalWithHttpMessagesAsync(System.String,System.Double,System.String,System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Request a withdrawal to an external wallet.
            </summary>
            <remarks>
            This will send a confirmation email to the email address on record, unless
            requested via an API Key with the `withdraw` permission.
            </remarks>
            <param name='currency'>
            Currency you're withdrawing. Options: `XBt`
            </param>
            <param name='amount'>
            Amount of withdrawal currency.
            </param>
            <param name='address'>
            Destination Address.
            </param>
            <param name='otpToken'>
            2FA token. Required if 2FA is enabled on your account.
            </param>
            <param name='fee'>
            Network fee for Bitcoin withdrawals. If not specified, a default value will
            be calculated based on Bitcoin network conditions. You will have a chance
            to confirm this via email.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsercancelWithdrawalWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Cancel a withdrawal.
            </summary>
            <param name='token'>
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UserconfirmWithdrawalWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Confirm a withdrawal.
            </summary>
            <param name='token'>
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UserrequestEnableTFAWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get secret key for setting up two-factor auth.
            </summary>
            <remarks>
            Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already
            enabled.
            </remarks>
            <param name='type'>
            Two-factor auth type. Supported types: 'GA' (Google Authenticator)
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UserconfirmEnableTFAWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Confirm two-factor auth for this account. If using a Yubikey, simply send a
            token to this endpoint.
            </summary>
            <param name='token'>
            Token from your selected TFA type.
            </param>
            <param name='type'>
            Two-factor auth type. Supported types: 'GA' (Google Authenticator),
            'Yubikey'
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UserdisableTFAWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Disable two-factor auth for this account.
            </summary>
            <param name='token'>
            Token from your selected TFA type.
            </param>
            <param name='type'>
            Two-factor auth type. Supported types: 'GA' (Google Authenticator)
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UserconfirmWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Confirm your email address with a token.
            </summary>
            <param name='token'>
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsergetAffiliateStatusWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your current affiliate/referral status.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsercheckReferralCodeWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Check if a referral code is valid.
            </summary>
            <remarks>
            If the code is valid, responds with the referral code's discount (e.g.
            `0.1` for 10%). Otherwise, will return a 404.
            </remarks>
            <param name='referralCode'>
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UserlogoutWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Log out of BitMEX.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UserlogoutAllWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Log all systems out of BitMEX. This will revoke all of your account's
            access tokens, logging you out on all devices.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsersavePreferencesWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Save user preferences.
            </summary>
            <param name='prefs'>
            </param>
            <param name='overwrite'>
            If true, will overwrite all existing preferences.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsergetWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your user model.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UserupdateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update your password, name, and other attributes.
            </summary>
            <param name='firstname'>
            </param>
            <param name='lastname'>
            </param>
            <param name='oldPassword'>
            </param>
            <param name='newPassword'>
            </param>
            <param name='newPasswordConfirm'>
            </param>
            <param name='username'>
            Username can only be set once. To reset, email support.
            </param>
            <param name='country'>
            Country of residence.
            </param>
            <param name='pgpPubKey'>
            PGP Public Key. If specified, automated emails will be sentwith this key.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsergetCommissionWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your account's commission status.
            </summary>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPI.UsergetMarginWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your account's margin status. Send a currency of "all" to receive an
            array of all supported currencies.
            </summary>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions">
            <summary>
            Extension methods for BitMEXAPI.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.AnnouncementgetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Get site announcements.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='columns'>
            Array of column names to fetch. If omitted, will return all columns.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.AnnouncementgetUrgentAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get urgent (banner) announcements.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.APIKeynewAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)">
            <summary>
            Create a new API Key.
            </summary>
            <remarks>
            API Keys can also be created via [this Python
            script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py)
            See the [API Key Documentation](/app/apiKeys) for more information on
            capabilities.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='name'>
            Key name. This name is for reference only.
            </param>
            <param name='cidr'>
            CIDR block to restrict this key to. To restrict to a single address, append
            "/32", e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all
            IPs. Only one block may be set. &lt;a
            href="http://software77.net/cidr-101.html"&gt;More on CIDR blocks&lt;/a&gt;
            </param>
            <param name='permissions'>
            Key Permissions. All keys can read margin and position data. Additional
            permissions must be added. Available: ["order", "orderCancel", "withdraw"].
            </param>
            <param name='enabled'>
            Set to true to enable this key on creation. Otherwise, it must be
            explicitly enabled via /apiKey/enable.
            </param>
            <param name='token'>
            OTP Token (YubiKey, Google Authenticator)
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.APIKeygetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get your API Keys.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='reverse'>
            If true, will sort results newest first.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.APIKeyremoveAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove an API Key.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='apiKeyID'>
            API Key ID (public component).
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.APIKeydisableAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Disable an API Key.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='apiKeyID'>
            API Key ID (public component).
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.APIKeyenableAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Enable an API Key.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='apiKeyID'>
            API Key ID (public component).
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.ChatgetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Get chat messages.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='count'>
            Number of results to fetch.
            </param>
            <param name='start'>
            Starting ID for results.
            </param>
            <param name='reverse'>
            If true, will sort results newest first.
            </param>
            <param name='channelID'>
            Channel id. GET /chat/channels for ids. Leave blank for all.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.ChatnewAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Send a chat message.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='message'>
            </param>
            <param name='channelID'>
            Channel to post to. Default 1 (English).
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.ChatgetChannelsAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get available channels.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.ChatgetConnectedAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get connected users.
            </summary>
            <remarks>
            Returns an array with browser users in the first position and API users
            (bots) in the second position.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.ExecutiongetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get all raw executions for your account.
             </summary>
             <remarks>
             This returns all raw transactions, which includes order opening and
             cancelation, and order status
             changes. It can be quite noisy. More focused information is available at
             `/execution/tradeHistory`.
            
             You may also use the `filter` param to target your query. Specify an array
             as a filter value, such as
             `{"execType": ["Settlement", "Trade"]}` to filter on multiple values.
            
             See [the FIX
             Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html) for
             explanations of these fields.
            
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.ExecutiongetTradeHistoryAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get all balance-affecting executions. This includes each trade, insurance
             charge, and settlement.
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.FundinggetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get funding history.
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.InstrumentgetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get instruments.
             </summary>
             <remarks>
             This returns all instruments and indices, including those that have settled
             or are unlisted. Use this endpoint if you want to query for individual
             instruments or use a complex filter. Use `/instrument/active` to return
             active instruments, or use a filter like `{"state": "Open"}`.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.InstrumentgetActiveAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get all active instruments and instruments that have expired in &lt;24hrs.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.InstrumentgetIndicesAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get all price indices.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.InstrumentgetActiveAndIndicesAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Helper method. Gets all active instruments and all indices. This is a join
            of the result of /indices and /active.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.InstrumentgetActiveIntervalsAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Return all active contract series and interval pairs.
            </summary>
            <remarks>
            This endpoint is useful for determining which pairs are live. It returns
            two arrays of   strings. The first is intervals, such as `["BVOL:daily",
            "BVOL:weekly", "XBU:daily", "XBU:monthly", ...]`. These identifiers are
            usable in any query's `symbol` param. The second array is the current
            resolution of these intervals. Results are mapped at the same index.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.InstrumentgetCompositeIndexAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Nullable{System.Double},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Show constituent parts of an index.
             </summary>
             <remarks>
             Composite indices are built from multiple external price sources.
            
             Use this endpoint to get the underlying prices of an index. For example,
             send a `symbol` of `.XBT` to
             get the ticks and weights of the constituent exchanges that build the
             ".XBT" index.
            
             A tick with reference `"BMI"` and weight `null` is the composite index
             tick.
            
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='account'>
             </param>
             <param name='symbol'>
             The composite index symbol.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.InsurancegetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get insurance fund history.
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.LeaderboardgetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Get current leaderboard.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='method'>
            Ranking type. Options: "notional", "ROE"
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.LiquidationgetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get liquidation orders.
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.NotificationgetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get your current notifications.
            </summary>
            <remarks>
            This is an upcoming feature and currently does not return data.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrdergetOrdersAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get your orders.
             </summary>
             <remarks>
             To get open orders only, send {"open": true} in the filter param.
            
             See &lt;a
             href="http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html"&gt;the
             FIX Spec&lt;/a&gt; for explanations of these fields.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrdernewAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Create a new order.
             </summary>
             <remarks>
             ## Placing Orders
            
             This endpoint is used for placing orders. See individual fields below for
             more details on their use.
            
             #### Order Types
            
             All orders require a `symbol`. All other fields are optional except when
             otherwise specified.
            
             These are the valid `ordType`s:
            
             * **Limit**: The default order type. Specify an `orderQty` and `price`.
             * **Market**: A traditional Market order. A Market order will execute until
             filled or your bankruptcy price is reached, at
             which point it will cancel.
             * **MarketWithLeftOverAsLimit**: A market order that, after eating through
             the order book as far as
             permitted by available margin, will become a limit order. The difference
             between this type and `Market` only
             affects the behavior in thin books. Upon reaching the deepest possible
             price, if there is quantity left over,
             a `Market` order will cancel the remaining quantity.
             `MarketWithLeftOverAsLimit` will keep the remaining
             quantity in the books as a `Limit`.
             * **Stop**: A Stop Market order. Specify an `orderQty` and `stopPx`. When
             the `stopPx` is reached, the order will be entered
             into the book.
             * On sell orders, the order will trigger if the triggering price is lower
             than the `stopPx`. On buys, higher.
             * Note: Stop orders do not consume margin until triggered. Be sure that the
             required margin is available in your
             account so that it may trigger fully.
             * `Close` Stops don't require an `orderQty`. See Execution Instructions
             below.
             * **StopLimit**: Like a Stop Market, but enters a Limit order instead of a
             Market order. Specify an `orderQty`, `stopPx`,
             and `price`.
             * **MarketIfTouched**: Similar to a Stop, but triggers are done in the
             opposite direction. Useful for Take Profit orders.
             * **LimitIfTouched**: As above; use for Take Profit Limit orders.
            
             #### Execution Instructions
            
             The following `execInst`s are supported. If using multiple, separate with a
             comma (e.g. `LastPrice,Close`).
            
             * **ParticipateDoNotInitiate**: Also known as a Post-Only order. If this
             order would have executed on placement,
             it will cancel instead.
             * **AllOrNone**: Valid only for hidden orders (`displayQty: 0`). Use to
             only execute if the entire order would fill.
             * **MarkPrice, LastPrice, IndexPrice**: Used by stop and if-touched orders
             to determine the triggering price.
             Use only one. By default, `'MarkPrice'` is used. Also used for Pegged
             orders to define the value of `'LastPeg'`.
             * **ReduceOnly**: A `'ReduceOnly'` order can only reduce your position, not
             increase it. If you have a `'ReduceOnly'`
             limit order that rests in the order book while the position is reduced by
             other orders, then its order quantity will
             be amended down or canceled. If there are multiple `'ReduceOnly'` orders
             the least agresssive will be amended first.
             * **Close**: `'Close'` implies `'ReduceOnly'`. A `'Close'` order will
             cancel other active limit orders with the same side
             and symbol if the open quantity exceeds the current position. This is
             useful for stops: by canceling these orders, a
             `'Close'` Stop is ensured to have the margin required to execute, and can
             only execute up to the full size of your
             position. If not specified, a `'Close'` order has an `orderQty` equal to
             your current position's size.
            
             #### Linked Orders
            
             Linked Orders are an advanced capability. It is very powerful, but its use
             requires careful coding and testing.
             Please follow this document carefully and use the [Testnet
             Exchange](https://testnet.bitmex.com) while developing.
            
             BitMEX offers four advanced Linked Order types:
            
             * **OCO**: *One Cancels the Other*. A very flexible version of the standard
             Stop / Take Profit technique.
             Multiple orders may be linked together using a single `clOrdLinkID`. Send a
             `contingencyType` of
             `OneCancelsTheOther` on the orders. The first order that fully or partially
             executes (or activates
             for `Stop` orders) will cancel all other orders with the same
             `clOrdLinkID`.
             * **OTO**: *One Triggers the Other*. Send a `contingencyType` of
             `'OneTriggersTheOther'` on the primary order and
             then subsequent orders with the same `clOrdLinkID` will be not be triggered
             until the primary order fully executes.
             * **OUOA**: *One Updates the Other Absolute*. Send a `contingencyType` of
             `'OneUpdatesTheOtherAbsolute'` on the orders. Then
             as one order has a execution, other orders with the same `clOrdLinkID` will
             have their order quantity amended
             down by the execution quantity.
             * **OUOP**: *One Updates the Other Proportional*. Send a `contingencyType`
             of `'OneUpdatesTheOtherProportional'` on the orders. Then
             as one order has a execution, other orders with the same `clOrdLinkID` will
             have their order quantity reduced proportionally
             by the fill percentage.
            
             #### Trailing Stops
            
             You may use `pegPriceType` of `'TrailingStopPeg'` to create Trailing Stops.
             The pegged `stopPx` will move as the market
             moves away from the peg, and freeze as the market moves toward it.
            
             To use, combine with `pegOffsetValue` to set the `stopPx` of your order.
             The peg is set to the triggering price
             specified in the `execInst` (default `'MarkPrice'`). Use a negative offset
             for stop-sell and buy-if-touched orders.
            
             Requires `ordType`: `'Stop', 'StopLimit', 'MarketIfTouched',
             'LimitIfTouched'`.
            
             #### Simple Quantities
            
             Send a `simpleOrderQty` instead of an `orderQty` to create an order
             denominated in the underlying currency.
             This is useful for opening up a position with 1 XBT of exposure without
             having to calculate how many contracts it is.
            
             #### Rate Limits
            
             See the [Bulk Order Documentation](#!/Order/Order_newBulk) if you need to
             place multiple orders at the same time.
             Bulk orders require fewer risk checks in the trading engine and thus are
             ratelimited at **1/10** the normal rate.
            
             You can also improve your reactivity to market movements while staying
             under your ratelimit by using the
             [Amend](#!/Order/Order_amend) and [Amend Bulk](#!/Order/Order_amendBulk)
             endpoints. This allows you to stay
             in the market and avoids the cancel/replace cycle.
            
             #### Tracking Your Orders
            
             If you want to keep track of order IDs yourself, set a unique `clOrdID` per
             order.
             This `clOrdID` will come back as a property on the order and any related
             executions (including on the WebSocket),
             and can be used to get or cancel the order. Max length is 36 characters.
            
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. e.g. 'XBTUSD'.
             </param>
             <param name='side'>
             Order side. Valid options: Buy, Sell. Defaults to 'Buy' unless `orderQty`
             or `simpleOrderQty` is negative.
             </param>
             <param name='simpleOrderQty'>
             Order quantity in units of the underlying instrument (i.e. Bitcoin).
             </param>
             <param name='quantity'>
             Deprecated: use `orderQty`.
             </param>
             <param name='orderQty'>
             Order quantity in units of the instrument (i.e. contracts).
             </param>
             <param name='price'>
             Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched' orders.
             </param>
             <param name='displayQty'>
             Optional quantity to display in the book. Use 0 for a fully hidden order.
             </param>
             <param name='stopPrice'>
             Deprecated: use `stopPx`.
             </param>
             <param name='stopPx'>
             Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched', and
             'LimitIfTouched' orders. Use a price below the current price for stop-sell
             orders and buy-if-touched orders. Use `execInst` of 'MarkPrice' or
             'LastPrice' to define the current price used for triggering.
             </param>
             <param name='clOrdID'>
             Optional Client Order ID. This clOrdID will come back on the order and any
             related executions.
             </param>
             <param name='clOrdLinkID'>
             Optional Client Order Link ID for contingent orders.
             </param>
             <param name='pegOffsetValue'>
             Optional trailing offset from the current price for 'Stop', 'StopLimit',
             'MarketIfTouched', and 'LimitIfTouched' orders; use a negative offset for
             stop-sell orders and buy-if-touched orders. Optional offset from the peg
             price for 'Pegged' orders.
             </param>
             <param name='pegPriceType'>
             Optional peg price type. Valid options: LastPeg, MidPricePeg, MarketPeg,
             PrimaryPeg, TrailingStopPeg.
             </param>
             <param name='type'>
             Deprecated: use `ordType`.
             </param>
             <param name='ordType'>
             Order type. Valid options: Market, Limit, Stop, StopLimit, MarketIfTouched,
             LimitIfTouched, MarketWithLeftOverAsLimit, Pegged. Defaults to 'Limit' when
             `price` is specified. Defaults to 'Stop' when `stopPx` is specified.
             Defaults to 'StopLimit' when `price` and `stopPx` are specified.
             </param>
             <param name='timeInForce'>
             Time in force. Valid options: Day, GoodTillCancel, ImmediateOrCancel,
             FillOrKill. Defaults to 'GoodTillCancel' for 'Limit', 'StopLimit',
             'LimitIfTouched', and 'MarketWithLeftOverAsLimit' orders.
             </param>
             <param name='execInst'>
             Optional execution instructions. Valid options: ParticipateDoNotInitiate,
             AllOrNone, MarkPrice, IndexPrice, LastPrice, Close, ReduceOnly, Fixed.
             'AllOrNone' instruction requires `displayQty` to be 0. 'MarkPrice',
             'IndexPrice' or 'LastPrice' instruction valid for 'Stop', 'StopLimit',
             'MarketIfTouched', and 'LimitIfTouched' orders.
             </param>
             <param name='contingencyType'>
             Optional contingency type for use with `clOrdLinkID`. Valid options:
             OneCancelsTheOther, OneTriggersTheOther, OneUpdatesTheOtherAbsolute,
             OneUpdatesTheOtherProportional.
             </param>
             <param name='text'>
             Optional order annotation. e.g. 'Take profit'.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrderamendAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Threading.CancellationToken)">
             <summary>
             Amend the quantity or price of an open order.
             </summary>
             <remarks>
             Send an `orderID` or `origClOrdID` to identify the order you wish to amend.
            
             Both order quantity and price can be amended. Only one `qty` field can be
             used to amend.
            
             Use the `leavesQty` field to specify how much of the order you wish to
             remain open. This can be useful
             if you want to adjust your position's delta by a certain amount, regardless
             of how much of the order has
             already filled.
            
             Use the `simpleOrderQty` and `simpleLeavesQty` fields to specify order size
             in Bitcoin, rather than contracts.
             These fields will round up to the nearest contract.
            
             Like order placement, amending can be done in bulk. Simply send a request
             to `PUT /api/v1/order/bulk` with
             a JSON body of the shape: `{"orders": [{...}, {...}]}`, each object
             containing the fields used in this endpoint.
            
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='orderID'>
             Order ID
             </param>
             <param name='origClOrdID'>
             Client Order ID. See POST /order.
             </param>
             <param name='clOrdID'>
             Optional new Client Order ID, requires `origClOrdID`.
             </param>
             <param name='simpleOrderQty'>
             Optional order quantity in units of the underlying instrument (i.e.
             Bitcoin).
             </param>
             <param name='orderQty'>
             Optional order quantity in units of the instrument (i.e. contracts).
             </param>
             <param name='simpleLeavesQty'>
             Optional leaves quantity in units of the underlying instrument (i.e.
             Bitcoin). Useful for amending partially filled orders.
             </param>
             <param name='leavesQty'>
             Optional leaves quantity in units of the instrument (i.e. contracts).
             Useful for amending partially filled orders.
             </param>
             <param name='price'>
             Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched' orders.
             </param>
             <param name='stopPx'>
             Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched', and
             'LimitIfTouched' orders. Use a price below the current price for stop-sell
             orders and buy-if-touched orders.
             </param>
             <param name='pegOffsetValue'>
             Optional trailing offset from the current price for 'Stop', 'StopLimit',
             'MarketIfTouched', and 'LimitIfTouched' orders; use a negative offset for
             stop-sell orders and buy-if-touched orders. Optional offset from the peg
             price for 'Pegged' orders.
             </param>
             <param name='text'>
             Optional amend annotation. e.g. 'Adjust skew'.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrdercancelAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel order(s). Send multiple order IDs to cancel in bulk.
            </summary>
            <remarks>
            Either an orderID or a clOrdID must be provided.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='orderID'>
            Order ID(s).
            </param>
            <param name='clOrdID'>
            Client Order ID(s). See POST /order.
            </param>
            <param name='text'>
            Optional cancellation annotation. e.g. 'Spread Exceeded'.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrdernewBulkAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
             <summary>
             Create multiple new orders for the same symbol.
             </summary>
             <remarks>
             This endpoint is used for placing bulk orders. Valid order types are
             Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched,
             MarketWithLeftOverAsLimit, and Pegged.
            
             Each individual order object in the array should have the same properties
             as an individual POST /order call.
            
             This endpoint is much faster for getting many orders into the book at once.
             Because it reduces load on BitMEX
             systems, this endpoint is ratelimited at `ceil(0.1 * orders)`. Submitting
             10 orders via a bulk order call
             will only count as 1 request, 15 as 2, 32 as 4, and so on.
            
             For now, only `application/json` is supported on this endpoint.
            
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='orders'>
             An array of orders.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrderamendBulkAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Amend multiple orders for the same symbol.
            </summary>
            <remarks>
            Similar to POST /amend, but with multiple orders. `application/json` only.
            Ratelimited at 50%.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='orders'>
            An array of orders.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrderclosePositionAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Close a position. [Deprecated, use POST /order with execInst: 'Close']
            </summary>
            <remarks>
            If no `price` is specified, a market order will be submitted to close the
            whole of your position. This will also close all other open orders in this
            symbol.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='symbol'>
            Symbol of position to close.
            </param>
            <param name='price'>
            Optional limit price.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrdercancelAllAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all of your orders.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='symbol'>
            Optional symbol. If provided, only cancels orders for that symbol.
            </param>
            <param name='filter'>
            Optional filter for cancellation. Use to only cancel some orders, e.g.
            `{"side": "Buy"}`.
            </param>
            <param name='text'>
            Optional cancellation annotation. e.g. 'Spread Exceeded'
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrdercancelAllAfterAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Double,System.Threading.CancellationToken)">
             <summary>
             Automatically cancel all your orders after a specified timeout.
             </summary>
             <remarks>
             Useful as a dead-man's switch to ensure your orders are canceled in case of
             an outage.
             If called repeatedly, the existing offset will be canceled and a new one
             will be inserted in its place.
            
             Example usage: call this route at 15s intervals with an offset of 60000
             (60s).
             If this route is not called within 60 seconds, all your orders will be
             automatically canceled.
            
             This is also available via
             [WebSocket](https://www.bitmex.com/app/wsAPI#Dead-Mans-Switch-Auto-Cancel).
            
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='timeout'>
             Timeout in ms. Set to 0 to cancel this timer.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrderBookgetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Get current orderbook [deprecated, use /orderBook/L2].
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='symbol'>
            Instrument symbol. Send a series (e.g. XBT) to get data for the nearest
            contract in that series.
            </param>
            <param name='depth'>
            Orderbook depth.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.OrderBookgetL2Async(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Get current orderbook in vertical format.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='symbol'>
            Instrument symbol. Send a series (e.g. XBT) to get data for the nearest
            contract in that series.
            </param>
            <param name='depth'>
            Orderbook depth per side. Send 0 for full depth.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.PositiongetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Get your positions.
            </summary>
            <remarks>
            See &lt;a
            href="http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html"&gt;the
            FIX Spec&lt;/a&gt; for explanations of these fields.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='filter'>
            Table filter. For example, send {"symbol": "XBTUSD"}.
            </param>
            <param name='columns'>
            Which columns to fetch. For example, send ["columnName"].
            </param>
            <param name='count'>
            Number of rows to fetch.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.PositionisolateMarginAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Enable isolated margin or cross margin per-position.
            </summary>
            <remarks>
            Users can switch isolate margin per-position. This function allows
            switching margin isolation (aka fixed margin) on and off.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='symbol'>
            Position symbol to isolate.
            </param>
            <param name='enabled'>
            True for isolated margin, false for cross margin.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.PositionupdateRiskLimitAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Double,System.Threading.CancellationToken)">
            <summary>
            Update your risk limit.
            </summary>
            <remarks>
            Risk Limits limit the size of positions you can trade at various margin
            levels. Larger positions require more margin. Please see the Risk Limit
            documentation for more details.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='symbol'>
            Symbol of position to isolate.
            </param>
            <param name='riskLimit'>
            New Risk Limit, in Satoshis.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.PositiontransferIsolatedMarginAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Double,System.Threading.CancellationToken)">
            <summary>
            Transfer equity in or out of a position.
            </summary>
            <remarks>
            When margin is isolated on a position, use this function to add or remove
            margin from the position. Note that you cannot remove margin below the
            initial margin threshold.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='symbol'>
            Symbol of position to isolate.
            </param>
            <param name='amount'>
            Amount to transfer, in Satoshis. May be negative.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.PositionupdateLeverageAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Double,System.Threading.CancellationToken)">
            <summary>
            Choose leverage for a position.
            </summary>
            <remarks>
            Users can choose an isolated leverage. This will automatically enable
            isolated margin.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='symbol'>
            Symbol of position to adjust.
            </param>
            <param name='leverage'>
            Leverage value. Send a number between 0.01 and 100 to enable isolated
            margin with a fixed leverage. Send 0 to enable cross margin.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.QuotegetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get Quotes.
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.QuotegetBucketedAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get previous quotes in time buckets.
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='binSize'>
             Time interval to bucket by. Available options: [1m,5m,1h,1d].
             </param>
             <param name='partial'>
             If true, will send in-progress (incomplete) bins for the current time
             period.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.SchemagetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Get model schemata for data objects returned by this API.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='model'>
            Optional model filter. If omitted, will return all models.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.SchemawebsocketHelpAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Returns help text &amp; subject list for websocket usage.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.SettlementgetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get settlement history.
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.StatsgetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get exchange-wide and per-series turnover and volume statistics.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.StatshistoryAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get historical exchange-wide and per-series turnover and volume statistics.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.StatshistoryUSDAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get a summary of exchange statistics in USD.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.TradegetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get Trades.
             </summary>
             <remarks>
             Please note that indices (symbols starting with `.`) post trades at
             intervals to the trade feed. These have a `size` of 0 and are used only to
             indicate a changing price.
            
             See [the FIX
             Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AE_6569.html) for
             explanations of these fields.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.TradegetBucketedAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
             <summary>
             Get previous trades in time buckets.
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='binSize'>
             Time interval to bucket by. Available options: [1m,5m,1h,1d].
             </param>
             <param name='partial'>
             If true, will send in-progress (incomplete) bins for the current time
             period.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for the
             nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are `daily`,
             `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced querying
             on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for more
             details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsergetDepositAddressAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Get a deposit address.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='currency'>
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsergetWalletAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Get your current wallet information.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='currency'>
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsergetWalletHistoryAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Get a history of all of your wallet transactions (deposits, withdrawals,
            PNL).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='currency'>
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsergetWalletSummaryAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Get a summary of all of your wallet transactions (deposits, withdrawals,
            PNL).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='currency'>
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UserminWithdrawalFeeAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the minimum withdrawal fee for a currency.
            </summary>
            <remarks>
            This is changed based on network conditions to ensure timely withdrawals.
            During network congestion, this may be high. The fee is returned in the
            same currency.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='currency'>
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UserrequestWithdrawalAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Double,System.String,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Request a withdrawal to an external wallet.
            </summary>
            <remarks>
            This will send a confirmation email to the email address on record, unless
            requested via an API Key with the `withdraw` permission.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='currency'>
            Currency you're withdrawing. Options: `XBt`
            </param>
            <param name='amount'>
            Amount of withdrawal currency.
            </param>
            <param name='address'>
            Destination Address.
            </param>
            <param name='otpToken'>
            2FA token. Required if 2FA is enabled on your account.
            </param>
            <param name='fee'>
            Network fee for Bitcoin withdrawals. If not specified, a default value will
            be calculated based on Bitcoin network conditions. You will have a chance
            to confirm this via email.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsercancelWithdrawalAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel a withdrawal.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='token'>
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UserconfirmWithdrawalAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Confirm a withdrawal.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='token'>
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UserrequestEnableTFAAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Get secret key for setting up two-factor auth.
            </summary>
            <remarks>
            Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already
            enabled.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='type'>
            Two-factor auth type. Supported types: 'GA' (Google Authenticator)
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UserconfirmEnableTFAAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Confirm two-factor auth for this account. If using a Yubikey, simply send a
            token to this endpoint.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='token'>
            Token from your selected TFA type.
            </param>
            <param name='type'>
            Two-factor auth type. Supported types: 'GA' (Google Authenticator),
            'Yubikey'
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UserdisableTFAAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Disable two-factor auth for this account.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='token'>
            Token from your selected TFA type.
            </param>
            <param name='type'>
            Two-factor auth type. Supported types: 'GA' (Google Authenticator)
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UserconfirmAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Confirm your email address with a token.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='token'>
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsergetAffiliateStatusAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get your current affiliate/referral status.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsercheckReferralCodeAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Check if a referral code is valid.
            </summary>
            <remarks>
            If the code is valid, responds with the referral code's discount (e.g.
            `0.1` for 10%). Otherwise, will return a 404.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='referralCode'>
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UserlogoutAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Log out of BitMEX.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UserlogoutAllAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Log all systems out of BitMEX. This will revoke all of your account's
            access tokens, logging you out on all devices.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsersavePreferencesAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Save user preferences.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='prefs'>
            </param>
            <param name='overwrite'>
            If true, will overwrite all existing preferences.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsergetAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get your user model.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UserupdateAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update your password, name, and other attributes.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='firstname'>
            </param>
            <param name='lastname'>
            </param>
            <param name='oldPassword'>
            </param>
            <param name='newPassword'>
            </param>
            <param name='newPasswordConfirm'>
            </param>
            <param name='username'>
            Username can only be set once. To reset, email support.
            </param>
            <param name='country'>
            Country of residence.
            </param>
            <param name='pgpPubKey'>
            PGP Public Key. If specified, automated emails will be sentwith this key.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsergetCommissionAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.Threading.CancellationToken)">
            <summary>
            Get your account's commission status.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.BitMEXAPIExtensions.UsergetMarginAsync(TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI,System.String,System.Threading.CancellationToken)">
            <summary>
            Get your account's margin status. Send a currency of "all" to receive an
            array of all supported currencies.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='currency'>
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI">
             <summary>
             ## REST API for the BitMEX Trading Platform
            
             [View Changelog](/app/apiChangelog)
            
             ----
            
             #### Getting Started
            
            
             ##### Fetching Data
            
             All REST endpoints are documented below. You can try out any query
             right from this interface.
            
             Most table queries accept `count`, `start`, and `reverse` params. Set
             `reverse=true` to get rows newest-first.
            
             Additional documentation regarding filters, timestamps, and
             authentication
             is available in [the main API
             documentation](https://www.bitmex.com/app/restAPI).
            
             *All* table data is available via the [Websocket](/app/wsAPI). We
             highly recommend using the socket if you want
             to have the quickest possible data without being subject to ratelimits.
            
             ##### Return Types
            
             By default, all data is returned as JSON. Send `?_format=csv` to get
             CSV data or `?_format=xml` to get XML data.
            
             ##### Trade Data Queries
            
             *This is only a small subset of what is available, to get you started.*
            
             Fill in the parameters and click the `Try it out!` button to try any of
             these queries.
            
             * [Pricing Data](#!/Quote/Quote_get)
            
             * [Trade Data](#!/Trade/Trade_get)
            
             * [OrderBook Data](#!/OrderBook/OrderBook_getL2)
            
             * [Settlement Data](#!/Settlement/Settlement_get)
            
             * [Exchange Statistics](#!/Stats/Stats_history)
            
             Every function of the BitMEX.com platform is exposed here and
             documented. Many more functions are available.
            
             ##### Swagger Specification
            
             [â‡© Download Swagger JSON](swagger.json)
            
             ----
            
             ## All API Endpoints
            
             Click to expand a section.
            
             </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.Credentials">
            <summary>
            Subscription credentials which uniquely identify client
            subscription.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.AnnouncementgetWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get site announcements.
            </summary>
            <param name='columns'>
            Array of column names to fetch. If omitted, will return all
            columns.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.AnnouncementgetUrgentWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get urgent (banner) announcements.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.APIKeynewWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Create a new API Key.
            </summary>
            <remarks>
            API Keys can also be created via [this Python
            script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py)
            See the [API Key Documentation](/app/apiKeys) for more information
            on capabilities.
            </remarks>
            <param name='name'>
            Key name. This name is for reference only.
            </param>
            <param name='cidr'>
            CIDR block to restrict this key to. To restrict to a single
            address, append "/32", e.g. 207.39.29.22/32. Leave blank or set to
            0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a
            href="http://software77.net/cidr-101.html"&gt;More on CIDR
            blocks&lt;/a&gt;
            </param>
            <param name='permissions'>
            Key Permissions. All keys can read margin and position data.
            Additional permissions must be added. Available: ["order",
            "orderCancel", "withdraw"].
            </param>
            <param name='enabled'>
            Set to true to enable this key on creation. Otherwise, it must be
            explicitly enabled via /apiKey/enable.
            </param>
            <param name='token'>
            OTP Token (YubiKey, Google Authenticator)
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.APIKeygetWithHttpMessagesAsync(System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your API Keys.
            </summary>
            <param name='reverse'>
            If true, will sort results newest first.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.APIKeyremoveWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Remove an API Key.
            </summary>
            <param name='apiKeyID'>
            API Key ID (public component).
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.APIKeydisableWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Disable an API Key.
            </summary>
            <param name='apiKeyID'>
            API Key ID (public component).
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.APIKeyenableWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Enable an API Key.
            </summary>
            <param name='apiKeyID'>
            API Key ID (public component).
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.ChatgetWithHttpMessagesAsync(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get chat messages.
            </summary>
            <param name='count'>
            Number of results to fetch.
            </param>
            <param name='start'>
            Starting ID for results.
            </param>
            <param name='reverse'>
            If true, will sort results newest first.
            </param>
            <param name='channelID'>
            Channel id. GET /chat/channels for ids. Leave blank for all.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.ChatnewWithHttpMessagesAsync(System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Send a chat message.
            </summary>
            <param name='message'>
            </param>
            <param name='channelID'>
            Channel to post to. Default 1 (English).
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.ChatgetChannelsWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get available channels.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.ChatgetConnectedWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get connected users.
            </summary>
            <remarks>
            Returns an array with browser users in the first position and API
            users (bots) in the second position.
            </remarks>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.ExecutiongetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get all raw executions for your account.
             </summary>
             <remarks>
             This returns all raw transactions, which includes order opening and
             cancelation, and order status
             changes. It can be quite noisy. More focused information is
             available at `/execution/tradeHistory`.
            
             You may also use the `filter` param to target your query. Specify
             an array as a filter value, such as
             `{"execType": ["Settlement", "Trade"]}` to filter on multiple
             values.
            
             See [the FIX
             Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html)
             for explanations of these fields.
            
             </remarks>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.ExecutiongetTradeHistoryWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get all balance-affecting executions. This includes each trade,
             insurance charge, and settlement.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.FundinggetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get funding history.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.InstrumentgetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get instruments.
             </summary>
             <remarks>
             This returns all instruments and indices, including those that have
             settled or are unlisted. Use this endpoint if you want to query for
             individual instruments or use a complex filter. Use
             `/instrument/active` to return active instruments, or use a filter
             like `{"state": "Open"}`.
             </remarks>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.InstrumentgetActiveWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get all active instruments and instruments that have expired in
            &lt;24hrs.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.InstrumentgetIndicesWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get all price indices.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.InstrumentgetActiveAndIndicesWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Helper method. Gets all active instruments and all indices. This is
            a join of the result of /indices and /active.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.InstrumentgetActiveIntervalsWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Return all active contract series and interval pairs.
            </summary>
            <remarks>
            This endpoint is useful for determining which pairs are live. It
            returns two arrays of   strings. The first is intervals, such as
            `["BVOL:daily", "BVOL:weekly", "XBU:daily", "XBU:monthly", ...]`.
            These identifiers are usable in any query's `symbol` param. The
            second array is the current resolution of these intervals. Results
            are mapped at the same index.
            </remarks>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.InstrumentgetCompositeIndexWithHttpMessagesAsync(System.Nullable{System.Double},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Show constituent parts of an index.
             </summary>
             <remarks>
             Composite indices are built from multiple external price sources.
            
             Use this endpoint to get the underlying prices of an index. For
             example, send a `symbol` of `.XBT` to
             get the ticks and weights of the constituent exchanges that build
             the ".XBT" index.
            
             A tick with reference `"BMI"` and weight `null` is the composite
             index tick.
            
             </remarks>
             <param name='account'>
             </param>
             <param name='symbol'>
             The composite index symbol.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.InsurancegetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get insurance fund history.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.LeaderboardgetWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get current leaderboard.
            </summary>
            <param name='method'>
            Ranking type. Options: "notional", "ROE"
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.LiquidationgetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get liquidation orders.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.NotificationgetWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your current notifications.
            </summary>
            <remarks>
            This is an upcoming feature and currently does not return data.
            </remarks>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrdergetOrdersWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get your orders.
             </summary>
             <remarks>
             To get open orders only, send {"open": true} in the filter param.
            
             See &lt;a
             href="http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html"&gt;the
             FIX Spec&lt;/a&gt; for explanations of these fields.
             </remarks>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrdernewWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create a new order.
             </summary>
             <remarks>
             ## Placing Orders
            
             This endpoint is used for placing orders. See individual fields
             below for more details on their use.
            
             #### Order Types
            
             All orders require a `symbol`. All other fields are optional except
             when otherwise specified.
            
             These are the valid `ordType`s:
            
             * **Limit**: The default order type. Specify an `orderQty` and
             `price`.
             * **Market**: A traditional Market order. A Market order will
             execute until filled or your bankruptcy price is reached, at
             which point it will cancel.
             * **MarketWithLeftOverAsLimit**: A market order that, after eating
             through the order book as far as
             permitted by available margin, will become a limit order. The
             difference between this type and `Market` only
             affects the behavior in thin books. Upon reaching the deepest
             possible price, if there is quantity left over,
             a `Market` order will cancel the remaining quantity.
             `MarketWithLeftOverAsLimit` will keep the remaining
             quantity in the books as a `Limit`.
             * **Stop**: A Stop Market order. Specify an `orderQty` and
             `stopPx`. When the `stopPx` is reached, the order will be entered
             into the book.
             * On sell orders, the order will trigger if the triggering price is
             lower than the `stopPx`. On buys, higher.
             * Note: Stop orders do not consume margin until triggered. Be sure
             that the required margin is available in your
             account so that it may trigger fully.
             * `Close` Stops don't require an `orderQty`. See Execution
             Instructions below.
             * **StopLimit**: Like a Stop Market, but enters a Limit order
             instead of a Market order. Specify an `orderQty`, `stopPx`,
             and `price`.
             * **MarketIfTouched**: Similar to a Stop, but triggers are done in
             the opposite direction. Useful for Take Profit orders.
             * **LimitIfTouched**: As above; use for Take Profit Limit orders.
            
             #### Execution Instructions
            
             The following `execInst`s are supported. If using multiple,
             separate with a comma (e.g. `LastPrice,Close`).
            
             * **ParticipateDoNotInitiate**: Also known as a Post-Only order. If
             this order would have executed on placement,
             it will cancel instead.
             * **AllOrNone**: Valid only for hidden orders (`displayQty: 0`).
             Use to only execute if the entire order would fill.
             * **MarkPrice, LastPrice, IndexPrice**: Used by stop and if-touched
             orders to determine the triggering price.
             Use only one. By default, `'MarkPrice'` is used. Also used for
             Pegged orders to define the value of `'LastPeg'`.
             * **ReduceOnly**: A `'ReduceOnly'` order can only reduce your
             position, not increase it. If you have a `'ReduceOnly'`
             limit order that rests in the order book while the position is
             reduced by other orders, then its order quantity will
             be amended down or canceled. If there are multiple `'ReduceOnly'`
             orders the least agresssive will be amended first.
             * **Close**: `'Close'` implies `'ReduceOnly'`. A `'Close'` order
             will cancel other active limit orders with the same side
             and symbol if the open quantity exceeds the current position. This
             is useful for stops: by canceling these orders, a
             `'Close'` Stop is ensured to have the margin required to execute,
             and can only execute up to the full size of your
             position. If not specified, a `'Close'` order has an `orderQty`
             equal to your current position's size.
            
             #### Linked Orders
            
             Linked Orders are an advanced capability. It is very powerful, but
             its use requires careful coding and testing.
             Please follow this document carefully and use the [Testnet
             Exchange](https://testnet.bitmex.com) while developing.
            
             BitMEX offers four advanced Linked Order types:
            
             * **OCO**: *One Cancels the Other*. A very flexible version of the
             standard Stop / Take Profit technique.
             Multiple orders may be linked together using a single
             `clOrdLinkID`. Send a `contingencyType` of
             `OneCancelsTheOther` on the orders. The first order that fully or
             partially executes (or activates
             for `Stop` orders) will cancel all other orders with the same
             `clOrdLinkID`.
             * **OTO**: *One Triggers the Other*. Send a `contingencyType` of
             `'OneTriggersTheOther'` on the primary order and
             then subsequent orders with the same `clOrdLinkID` will be not be
             triggered until the primary order fully executes.
             * **OUOA**: *One Updates the Other Absolute*. Send a
             `contingencyType` of `'OneUpdatesTheOtherAbsolute'` on the orders.
             Then
             as one order has a execution, other orders with the same
             `clOrdLinkID` will have their order quantity amended
             down by the execution quantity.
             * **OUOP**: *One Updates the Other Proportional*. Send a
             `contingencyType` of `'OneUpdatesTheOtherProportional'` on the
             orders. Then
             as one order has a execution, other orders with the same
             `clOrdLinkID` will have their order quantity reduced proportionally
             by the fill percentage.
            
             #### Trailing Stops
            
             You may use `pegPriceType` of `'TrailingStopPeg'` to create
             Trailing Stops. The pegged `stopPx` will move as the market
             moves away from the peg, and freeze as the market moves toward it.
            
             To use, combine with `pegOffsetValue` to set the `stopPx` of your
             order. The peg is set to the triggering price
             specified in the `execInst` (default `'MarkPrice'`). Use a negative
             offset for stop-sell and buy-if-touched orders.
            
             Requires `ordType`: `'Stop', 'StopLimit', 'MarketIfTouched',
             'LimitIfTouched'`.
            
             #### Simple Quantities
            
             Send a `simpleOrderQty` instead of an `orderQty` to create an order
             denominated in the underlying currency.
             This is useful for opening up a position with 1 XBT of exposure
             without having to calculate how many contracts it is.
            
             #### Rate Limits
            
             See the [Bulk Order Documentation](#!/Order/Order_newBulk) if you
             need to place multiple orders at the same time.
             Bulk orders require fewer risk checks in the trading engine and
             thus are ratelimited at **1/10** the normal rate.
            
             You can also improve your reactivity to market movements while
             staying under your ratelimit by using the
             [Amend](#!/Order/Order_amend) and [Amend
             Bulk](#!/Order/Order_amendBulk) endpoints. This allows you to stay
             in the market and avoids the cancel/replace cycle.
            
             #### Tracking Your Orders
            
             If you want to keep track of order IDs yourself, set a unique
             `clOrdID` per order.
             This `clOrdID` will come back as a property on the order and any
             related executions (including on the WebSocket),
             and can be used to get or cancel the order. Max length is 36
             characters.
            
             </remarks>
             <param name='symbol'>
             Instrument symbol. e.g. 'XBTUSD'.
             </param>
             <param name='side'>
             Order side. Valid options: Buy, Sell. Defaults to 'Buy' unless
             `orderQty` or `simpleOrderQty` is negative.
             </param>
             <param name='simpleOrderQty'>
             Order quantity in units of the underlying instrument (i.e.
             Bitcoin).
             </param>
             <param name='quantity'>
             Deprecated: use `orderQty`.
             </param>
             <param name='orderQty'>
             Order quantity in units of the instrument (i.e. contracts).
             </param>
             <param name='price'>
             Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched'
             orders.
             </param>
             <param name='displayQty'>
             Optional quantity to display in the book. Use 0 for a fully hidden
             order.
             </param>
             <param name='stopPrice'>
             Deprecated: use `stopPx`.
             </param>
             <param name='stopPx'>
             Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched',
             and 'LimitIfTouched' orders. Use a price below the current price
             for stop-sell orders and buy-if-touched orders. Use `execInst` of
             'MarkPrice' or 'LastPrice' to define the current price used for
             triggering.
             </param>
             <param name='clOrdID'>
             Optional Client Order ID. This clOrdID will come back on the order
             and any related executions.
             </param>
             <param name='clOrdLinkID'>
             Optional Client Order Link ID for contingent orders.
             </param>
             <param name='pegOffsetValue'>
             Optional trailing offset from the current price for 'Stop',
             'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders; use a
             negative offset for stop-sell orders and buy-if-touched orders.
             Optional offset from the peg price for 'Pegged' orders.
             </param>
             <param name='pegPriceType'>
             Optional peg price type. Valid options: LastPeg, MidPricePeg,
             MarketPeg, PrimaryPeg, TrailingStopPeg.
             </param>
             <param name='type'>
             Deprecated: use `ordType`.
             </param>
             <param name='ordType'>
             Order type. Valid options: Market, Limit, Stop, StopLimit,
             MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, Pegged.
             Defaults to 'Limit' when `price` is specified. Defaults to 'Stop'
             when `stopPx` is specified. Defaults to 'StopLimit' when `price`
             and `stopPx` are specified.
             </param>
             <param name='timeInForce'>
             Time in force. Valid options: Day, GoodTillCancel,
             ImmediateOrCancel, FillOrKill. Defaults to 'GoodTillCancel' for
             'Limit', 'StopLimit', 'LimitIfTouched', and
             'MarketWithLeftOverAsLimit' orders.
             </param>
             <param name='execInst'>
             Optional execution instructions. Valid options:
             ParticipateDoNotInitiate, AllOrNone, MarkPrice, IndexPrice,
             LastPrice, Close, ReduceOnly, Fixed. 'AllOrNone' instruction
             requires `displayQty` to be 0. 'MarkPrice', 'IndexPrice' or
             'LastPrice' instruction valid for 'Stop', 'StopLimit',
             'MarketIfTouched', and 'LimitIfTouched' orders.
             </param>
             <param name='contingencyType'>
             Optional contingency type for use with `clOrdLinkID`. Valid
             options: OneCancelsTheOther, OneTriggersTheOther,
             OneUpdatesTheOtherAbsolute, OneUpdatesTheOtherProportional.
             </param>
             <param name='text'>
             Optional order annotation. e.g. 'Take profit'.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrderamendWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Amend the quantity or price of an open order.
             </summary>
             <remarks>
             Send an `orderID` or `origClOrdID` to identify the order you wish
             to amend.
            
             Both order quantity and price can be amended. Only one `qty` field
             can be used to amend.
            
             Use the `leavesQty` field to specify how much of the order you wish
             to remain open. This can be useful
             if you want to adjust your position's delta by a certain amount,
             regardless of how much of the order has
             already filled.
            
             Use the `simpleOrderQty` and `simpleLeavesQty` fields to specify
             order size in Bitcoin, rather than contracts.
             These fields will round up to the nearest contract.
            
             Like order placement, amending can be done in bulk. Simply send a
             request to `PUT /api/v1/order/bulk` with
             a JSON body of the shape: `{"orders": [{...}, {...}]}`, each object
             containing the fields used in this endpoint.
            
             </remarks>
             <param name='orderID'>
             Order ID
             </param>
             <param name='origClOrdID'>
             Client Order ID. See POST /order.
             </param>
             <param name='clOrdID'>
             Optional new Client Order ID, requires `origClOrdID`.
             </param>
             <param name='simpleOrderQty'>
             Optional order quantity in units of the underlying instrument (i.e.
             Bitcoin).
             </param>
             <param name='orderQty'>
             Optional order quantity in units of the instrument (i.e.
             contracts).
             </param>
             <param name='simpleLeavesQty'>
             Optional leaves quantity in units of the underlying instrument
             (i.e. Bitcoin). Useful for amending partially filled orders.
             </param>
             <param name='leavesQty'>
             Optional leaves quantity in units of the instrument (i.e.
             contracts). Useful for amending partially filled orders.
             </param>
             <param name='price'>
             Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched'
             orders.
             </param>
             <param name='stopPx'>
             Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched',
             and 'LimitIfTouched' orders. Use a price below the current price
             for stop-sell orders and buy-if-touched orders.
             </param>
             <param name='pegOffsetValue'>
             Optional trailing offset from the current price for 'Stop',
             'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders; use a
             negative offset for stop-sell orders and buy-if-touched orders.
             Optional offset from the peg price for 'Pegged' orders.
             </param>
             <param name='text'>
             Optional amend annotation. e.g. 'Adjust skew'.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrdercancelWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Cancel order(s). Send multiple order IDs to cancel in bulk.
            </summary>
            <remarks>
            Either an orderID or a clOrdID must be provided.
            </remarks>
            <param name='orderID'>
            Order ID(s).
            </param>
            <param name='clOrdID'>
            Client Order ID(s). See POST /order.
            </param>
            <param name='text'>
            Optional cancellation annotation. e.g. 'Spread Exceeded'.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrdernewBulkWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create multiple new orders for the same symbol.
             </summary>
             <remarks>
             This endpoint is used for placing bulk orders. Valid order types
             are Market, Limit, Stop, StopLimit, MarketIfTouched,
             LimitIfTouched, MarketWithLeftOverAsLimit, and Pegged.
            
             Each individual order object in the array should have the same
             properties as an individual POST /order call.
            
             This endpoint is much faster for getting many orders into the book
             at once. Because it reduces load on BitMEX
             systems, this endpoint is ratelimited at `ceil(0.1 * orders)`.
             Submitting 10 orders via a bulk order call
             will only count as 1 request, 15 as 2, 32 as 4, and so on.
            
             For now, only `application/json` is supported on this endpoint.
            
             </remarks>
             <param name='orders'>
             An array of orders.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrderamendBulkWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Amend multiple orders for the same symbol.
            </summary>
            <remarks>
            Similar to POST /amend, but with multiple orders.
            `application/json` only. Ratelimited at 50%.
            </remarks>
            <param name='orders'>
            An array of orders.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrderclosePositionWithHttpMessagesAsync(System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Close a position. [Deprecated, use POST /order with execInst:
            'Close']
            </summary>
            <remarks>
            If no `price` is specified, a market order will be submitted to
            close the whole of your position. This will also close all other
            open orders in this symbol.
            </remarks>
            <param name='symbol'>
            Symbol of position to close.
            </param>
            <param name='price'>
            Optional limit price.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrdercancelAllWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Cancels all of your orders.
            </summary>
            <param name='symbol'>
            Optional symbol. If provided, only cancels orders for that symbol.
            </param>
            <param name='filter'>
            Optional filter for cancellation. Use to only cancel some orders,
            e.g. `{"side": "Buy"}`.
            </param>
            <param name='text'>
            Optional cancellation annotation. e.g. 'Spread Exceeded'
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrdercancelAllAfterWithHttpMessagesAsync(System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Automatically cancel all your orders after a specified timeout.
             </summary>
             <remarks>
             Useful as a dead-man's switch to ensure your orders are canceled in
             case of an outage.
             If called repeatedly, the existing offset will be canceled and a
             new one will be inserted in its place.
            
             Example usage: call this route at 15s intervals with an offset of
             60000 (60s).
             If this route is not called within 60 seconds, all your orders will
             be automatically canceled.
            
             This is also available via
             [WebSocket](https://www.bitmex.com/app/wsAPI#Dead-Mans-Switch-Auto-Cancel).
            
             </remarks>
             <param name='timeout'>
             Timeout in ms. Set to 0 to cancel this timer.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrderBookgetWithHttpMessagesAsync(System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get current orderbook [deprecated, use /orderBook/L2].
            </summary>
            <param name='symbol'>
            Instrument symbol. Send a series (e.g. XBT) to get data for the
            nearest contract in that series.
            </param>
            <param name='depth'>
            Orderbook depth.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.OrderBookgetL2WithHttpMessagesAsync(System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get current orderbook in vertical format.
            </summary>
            <param name='symbol'>
            Instrument symbol. Send a series (e.g. XBT) to get data for the
            nearest contract in that series.
            </param>
            <param name='depth'>
            Orderbook depth per side. Send 0 for full depth.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.PositiongetWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your positions.
            </summary>
            <remarks>
            See &lt;a
            href="http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html"&gt;the
            FIX Spec&lt;/a&gt; for explanations of these fields.
            </remarks>
            <param name='filter'>
            Table filter. For example, send {"symbol": "XBTUSD"}.
            </param>
            <param name='columns'>
            Which columns to fetch. For example, send ["columnName"].
            </param>
            <param name='count'>
            Number of rows to fetch.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.PositionisolateMarginWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Enable isolated margin or cross margin per-position.
            </summary>
            <remarks>
            Users can switch isolate margin per-position. This function allows
            switching margin isolation (aka fixed margin) on and off.
            </remarks>
            <param name='symbol'>
            Position symbol to isolate.
            </param>
            <param name='enabled'>
            True for isolated margin, false for cross margin.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.PositionupdateRiskLimitWithHttpMessagesAsync(System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update your risk limit.
            </summary>
            <remarks>
            Risk Limits limit the size of positions you can trade at various
            margin levels. Larger positions require more margin. Please see the
            Risk Limit documentation for more details.
            </remarks>
            <param name='symbol'>
            Symbol of position to isolate.
            </param>
            <param name='riskLimit'>
            New Risk Limit, in Satoshis.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.PositiontransferIsolatedMarginWithHttpMessagesAsync(System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Transfer equity in or out of a position.
            </summary>
            <remarks>
            When margin is isolated on a position, use this function to add or
            remove margin from the position. Note that you cannot remove margin
            below the initial margin threshold.
            </remarks>
            <param name='symbol'>
            Symbol of position to isolate.
            </param>
            <param name='amount'>
            Amount to transfer, in Satoshis. May be negative.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.PositionupdateLeverageWithHttpMessagesAsync(System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Choose leverage for a position.
            </summary>
            <remarks>
            Users can choose an isolated leverage. This will automatically
            enable isolated margin.
            </remarks>
            <param name='symbol'>
            Symbol of position to adjust.
            </param>
            <param name='leverage'>
            Leverage value. Send a number between 0.01 and 100 to enable
            isolated margin with a fixed leverage. Send 0 to enable cross
            margin.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.QuotegetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get Quotes.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.QuotegetBucketedWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get previous quotes in time buckets.
             </summary>
             <param name='binSize'>
             Time interval to bucket by. Available options: [1m,5m,1h,1d].
             </param>
             <param name='partial'>
             If true, will send in-progress (incomplete) bins for the current
             time period.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.SchemagetWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get model schemata for data objects returned by this API.
            </summary>
            <param name='model'>
            Optional model filter. If omitted, will return all models.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.SchemawebsocketHelpWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Returns help text &amp; subject list for websocket usage.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.SettlementgetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get settlement history.
             </summary>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.StatsgetWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get exchange-wide and per-series turnover and volume statistics.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.StatshistoryWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get historical exchange-wide and per-series turnover and volume
            statistics.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.StatshistoryUSDWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get a summary of exchange statistics in USD.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.TradegetWithHttpMessagesAsync(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get Trades.
             </summary>
             <remarks>
             Please note that indices (symbols starting with `.`) post trades at
             intervals to the trade feed. These have a `size` of 0 and are used
             only to indicate a changing price.
            
             See [the FIX
             Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AE_6569.html)
             for explanations of these fields.
             </remarks>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.TradegetBucketedWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Get previous trades in time buckets.
             </summary>
             <param name='binSize'>
             Time interval to bucket by. Available options: [1m,5m,1h,1d].
             </param>
             <param name='partial'>
             If true, will send in-progress (incomplete) bins for the current
             time period.
             </param>
             <param name='symbol'>
             Instrument symbol. Send a bare series (e.g. XBU) to get data for
             the nearest expiring contract in that series.
            
             You can also send a timeframe, e.g. `XBU:monthly`. Timeframes are
             `daily`, `weekly`, `monthly`, `quarterly`, and `biquarterly`.
             </param>
             <param name='filter'>
             Generic table filter. Send JSON key/value pairs, such as `{"key":
             "value"}`. You can key on individual fields, and do more advanced
             querying on timestamps. See the [Timestamp
             Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters) for
             more details.
             </param>
             <param name='columns'>
             Array of column names to fetch. If omitted, will return all
             columns.
            
             Note that this method will always return item keys, even when not
             specified, so you may receive more columns that you expect.
             </param>
             <param name='count'>
             Number of results to fetch.
             </param>
             <param name='start'>
             Starting point for results.
             </param>
             <param name='reverse'>
             If true, will sort results newest first.
             </param>
             <param name='startTime'>
             Starting date filter for results.
             </param>
             <param name='endTime'>
             Ending date filter for results.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsergetDepositAddressWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get a deposit address.
            </summary>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsergetWalletWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your current wallet information.
            </summary>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsergetWalletHistoryWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get a history of all of your wallet transactions (deposits,
            withdrawals, PNL).
            </summary>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsergetWalletSummaryWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get a summary of all of your wallet transactions (deposits,
            withdrawals, PNL).
            </summary>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UserminWithdrawalFeeWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get the minimum withdrawal fee for a currency.
            </summary>
            <remarks>
            This is changed based on network conditions to ensure timely
            withdrawals. During network congestion, this may be high. The fee
            is returned in the same currency.
            </remarks>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UserrequestWithdrawalWithHttpMessagesAsync(System.String,System.Double,System.String,System.String,System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Request a withdrawal to an external wallet.
            </summary>
            <remarks>
            This will send a confirmation email to the email address on record,
            unless requested via an API Key with the `withdraw` permission.
            </remarks>
            <param name='currency'>
            Currency you're withdrawing. Options: `XBt`
            </param>
            <param name='amount'>
            Amount of withdrawal currency.
            </param>
            <param name='address'>
            Destination Address.
            </param>
            <param name='otpToken'>
            2FA token. Required if 2FA is enabled on your account.
            </param>
            <param name='fee'>
            Network fee for Bitcoin withdrawals. If not specified, a default
            value will be calculated based on Bitcoin network conditions. You
            will have a chance to confirm this via email.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsercancelWithdrawalWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Cancel a withdrawal.
            </summary>
            <param name='token'>
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UserconfirmWithdrawalWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Confirm a withdrawal.
            </summary>
            <param name='token'>
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UserrequestEnableTFAWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get secret key for setting up two-factor auth.
            </summary>
            <remarks>
            Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is
            already enabled.
            </remarks>
            <param name='type'>
            Two-factor auth type. Supported types: 'GA' (Google Authenticator)
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UserconfirmEnableTFAWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Confirm two-factor auth for this account. If using a Yubikey,
            simply send a token to this endpoint.
            </summary>
            <param name='token'>
            Token from your selected TFA type.
            </param>
            <param name='type'>
            Two-factor auth type. Supported types: 'GA' (Google Authenticator),
            'Yubikey'
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UserdisableTFAWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Disable two-factor auth for this account.
            </summary>
            <param name='token'>
            Token from your selected TFA type.
            </param>
            <param name='type'>
            Two-factor auth type. Supported types: 'GA' (Google Authenticator)
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UserconfirmWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Confirm your email address with a token.
            </summary>
            <param name='token'>
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsergetAffiliateStatusWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your current affiliate/referral status.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsercheckReferralCodeWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Check if a referral code is valid.
            </summary>
            <remarks>
            If the code is valid, responds with the referral code's discount
            (e.g. `0.1` for 10%). Otherwise, will return a 404.
            </remarks>
            <param name='referralCode'>
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UserlogoutWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Log out of BitMEX.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UserlogoutAllWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Log all systems out of BitMEX. This will revoke all of your
            account's access tokens, logging you out on all devices.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsersavePreferencesWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Save user preferences.
            </summary>
            <param name='prefs'>
            </param>
            <param name='overwrite'>
            If true, will overwrite all existing preferences.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsergetWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your user model.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UserupdateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update your password, name, and other attributes.
            </summary>
            <param name='firstname'>
            </param>
            <param name='lastname'>
            </param>
            <param name='oldPassword'>
            </param>
            <param name='newPassword'>
            </param>
            <param name='newPasswordConfirm'>
            </param>
            <param name='username'>
            Username can only be set once. To reset, email support.
            </param>
            <param name='country'>
            Country of residence.
            </param>
            <param name='pgpPubKey'>
            PGP Public Key. If specified, automated emails will be sentwith
            this key.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsergetCommissionWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your account's commission status.
            </summary>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.IBitMEXAPI.UsergetMarginWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Get your account's margin status. Send a currency of "all" to
            receive an array of all supported currencies.
            </summary>
            <param name='currency'>
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.AccessToken.#ctor">
            <summary>
            Initializes a new instance of the AccessToken class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.AccessToken.#ctor(System.String,System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the AccessToken class.
            </summary>
            <param name="ttl">time to live in seconds (2 weeks by
            default)</param>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.AccessToken.Id">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.AccessToken.Ttl">
            <summary>
            Gets or sets time to live in seconds (2 weeks by default)
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.AccessToken.Created">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.AccessToken.UserId">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.AccessToken.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.#ctor">
            <summary>
            Initializes a new instance of the Affiliate class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.#ctor(System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Affiliate class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.Account">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.PrevPayout">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.PrevTurnover">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.PrevComm">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.PrevTimestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.ExecTurnover">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.ExecComm">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.TotalReferrals">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.TotalTurnover">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.TotalComm">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.PayoutPcnt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.PendingPayout">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.ReferrerAccount">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Affiliate.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Announcement">
            <summary>
            Public Announcements
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Announcement.#ctor">
            <summary>
            Initializes a new instance of the Announcement class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Announcement.#ctor(System.Double,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the Announcement class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Announcement.Id">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Announcement.Link">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Announcement.Title">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Announcement.Content">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Announcement.Date">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Announcement.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey">
            <summary>
            Persistent API Keys for Developers
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.#ctor">
            <summary>
            Initializes a new instance of the APIKey class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.#ctor(System.String,System.String,System.String,System.Double,System.Double,System.String,System.Collections.Generic.IList{System.Object},System.Nullable{System.Boolean},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the APIKey class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.Id">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.Secret">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.Name">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.Nonce">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.Cidr">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.Permissions">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.Enabled">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.UserId">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.Created">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKey.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKeyremoveOKResponse.#ctor">
            <summary>
            Initializes a new instance of the APIKeyremoveOKResponse class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKeyremoveOKResponse.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the APIKeyremoveOKResponse class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.APIKeyremoveOKResponse.Success">
            <summary>
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat">
            <summary>
            Trollbox Data
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat.#ctor">
            <summary>
            Initializes a new instance of the Chat class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat.#ctor(System.DateTime,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Chat class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat.Id">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat.Date">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat.User">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat.Message">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat.Html">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat.FromBot">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat.ChannelID">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Chat.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.ChatChannel.#ctor">
            <summary>
            Initializes a new instance of the ChatChannel class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.ChatChannel.#ctor(System.String,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the ChatChannel class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.ChatChannel.Id">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.ChatChannel.Name">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.ChatChannel.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.ConnectedUsers.#ctor">
            <summary>
            Initializes a new instance of the ConnectedUsers class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.ConnectedUsers.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the ConnectedUsers class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.ConnectedUsers.Users">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.ConnectedUsers.Bots">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Error.#ctor">
            <summary>
            Initializes a new instance of the Error class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Error.#ctor(TradingBot.Exchanges.Concrete.AutorestClient.Models.ErrorError)">
            <summary>
            Initializes a new instance of the Error class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Error.ErrorProperty">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Error.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.ErrorError.#ctor">
            <summary>
            Initializes a new instance of the ErrorError class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.ErrorError.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ErrorError class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.ErrorError.Message">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.ErrorError.Name">
            <summary>
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution">
            <summary>
            Raw Order and Balance Data
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.#ctor">
            <summary>
            Initializes a new instance of the Execution class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the Execution class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.ExecID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.OrderID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.ClOrdID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.ClOrdLinkID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.Account">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.Side">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.LastQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.LastPx">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.UnderlyingLastPx">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.LastMkt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.LastLiquidityInd">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.SimpleOrderQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.OrderQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.Price">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.DisplayQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.StopPx">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.PegOffsetValue">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.PegPriceType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.SettlCurrency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.ExecType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.OrdType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.TimeInForce">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.ExecInst">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.ContingencyType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.ExDestination">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.OrdStatus">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.Triggered">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.WorkingIndicator">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.OrdRejReason">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.SimpleLeavesQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.LeavesQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.SimpleCumQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.CumQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.AvgPx">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.Commission">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.TradePublishIndicator">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.MultiLegReportingType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.Text">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.TrdMatchID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.ExecCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.ExecComm">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.HomeNotional">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.ForeignNotional">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.TransactTime">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Execution.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Funding">
            <summary>
            Swap Funding History
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Funding.#ctor">
            <summary>
            Initializes a new instance of the Funding class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Funding.#ctor(System.DateTime,System.String,System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Funding class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Funding.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Funding.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Funding.FundingInterval">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Funding.FundingRate">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Funding.FundingRateDaily">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Funding.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.IndexComposite.#ctor">
            <summary>
            Initializes a new instance of the IndexComposite class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.IndexComposite.#ctor(System.DateTime,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the IndexComposite class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.IndexComposite.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.IndexComposite.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.IndexComposite.IndexSymbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.IndexComposite.Reference">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.IndexComposite.LastPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.IndexComposite.Weight">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.IndexComposite.Logged">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.IndexComposite.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument">
            <summary>
            Tradeable Contracts, Indices, and History
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.#ctor">
            <summary>
            Initializes a new instance of the Instrument class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the Instrument class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.RootSymbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.State">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Typ">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Listing">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Front">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Expiry">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Settle">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.RelistInterval">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.InverseLeg">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.SellLeg">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.BuyLeg">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.PositionCurrency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Underlying">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.QuoteCurrency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.UnderlyingSymbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Reference">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.ReferenceSymbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.CalcInterval">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.PublishInterval">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.PublishTime">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.MaxOrderQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.MaxPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.LotSize">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.TickSize">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Multiplier">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.SettlCurrency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.UnderlyingToPositionMultiplier">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.UnderlyingToSettleMultiplier">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.QuoteToSettleMultiplier">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.IsQuanto">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.IsInverse">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.InitMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.MaintMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.RiskLimit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.RiskStep">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Limit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Capped">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Taxed">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Deleverage">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.MakerFee">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.TakerFee">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.SettlementFee">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.InsuranceFee">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.FundingBaseSymbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.FundingQuoteSymbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.FundingPremiumSymbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.FundingTimestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.FundingInterval">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.FundingRate">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.IndicativeFundingRate">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.RebalanceTimestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.RebalanceInterval">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.OpeningTimestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.ClosingTimestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.SessionInterval">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.PrevClosePrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.LimitDownPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.LimitUpPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.BankruptLimitDownPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.BankruptLimitUpPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.PrevTotalVolume">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.TotalVolume">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Volume">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Volume24h">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.PrevTotalTurnover">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.TotalTurnover">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Turnover">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Turnover24h">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.PrevPrice24h">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Vwap">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.HighPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.LowPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.LastPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.LastPriceProtected">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.LastTickDirection">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.LastChangePcnt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.BidPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.MidPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.AskPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.ImpactBidPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.ImpactMidPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.ImpactAskPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.HasLiquidity">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.OpenInterest">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.OpenValue">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.FairMethod">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.FairBasisRate">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.FairBasis">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.FairPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.MarkMethod">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.MarkPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.IndicativeTaxRate">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.IndicativeSettlePrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.SettledPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Instrument.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.InstrumentInterval.#ctor">
            <summary>
            Initializes a new instance of the InstrumentInterval class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.InstrumentInterval.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the InstrumentInterval class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.InstrumentInterval.Intervals">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.InstrumentInterval.Symbols">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.InstrumentInterval.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Insurance">
            <summary>
            Insurance Fund Data
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Insurance.#ctor">
            <summary>
            Initializes a new instance of the Insurance class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Insurance.#ctor(System.String,System.DateTime,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Insurance class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Insurance.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Insurance.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Insurance.WalletBalance">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Insurance.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Leaderboard">
            <summary>
            Information on Top Users
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Leaderboard.#ctor">
            <summary>
            Initializes a new instance of the Leaderboard class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Leaderboard.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Leaderboard class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Leaderboard.Name">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Leaderboard.IsRealName">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Leaderboard.IsMe">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Leaderboard.Profit">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Leaderboard.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Liquidation">
            <summary>
            Active Liquidations
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Liquidation.#ctor">
            <summary>
            Initializes a new instance of the Liquidation class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Liquidation.#ctor(System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Liquidation class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Liquidation.OrderID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Liquidation.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Liquidation.Side">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Liquidation.Price">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Liquidation.LeavesQty">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Liquidation.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.#ctor">
            <summary>
            Initializes a new instance of the Margin class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.#ctor(System.Double,System.String,System.Nullable{System.Double},System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Margin class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.Account">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.RiskLimit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.PrevState">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.State">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.Action">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.Amount">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.PendingCredit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.PendingDebit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.ConfirmedDebit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.PrevRealisedPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.PrevUnrealisedPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.GrossComm">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.GrossOpenCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.GrossOpenPremium">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.GrossExecCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.GrossMarkValue">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.RiskValue">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.TaxableMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.InitMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.MaintMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.SessionMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.TargetExcessMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.VarMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.RealisedPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.UnrealisedPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.IndicativeTax">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.UnrealisedProfit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.SyntheticMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.WalletBalance">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.MarginBalance">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.MarginBalancePcnt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.MarginLeverage">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.MarginUsedPcnt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.ExcessMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.ExcessMarginPcnt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.AvailableMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.WithdrawableMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.GrossLastValue">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.Commission">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Margin.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification">
            <summary>
            Account Notifications
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.#ctor">
            <summary>
            Initializes a new instance of the Notification class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.#ctor(System.DateTime,System.String,System.String,System.Double,System.Nullable{System.Double},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the Notification class.
            </summary>
            <param name="type">Possible values include: 'success', 'error',
            'info'</param>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.Id">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.Date">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.Title">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.Body">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.Ttl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.Type">
            <summary>
            Gets or sets possible values include: 'success', 'error', 'info'
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.Closable">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.Persist">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.WaitForVisibility">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.Sound">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Notification.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order">
            <summary>
            Placement, Cancellation, Amending, and History
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.#ctor">
            <summary>
            Initializes a new instance of the Order class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.#ctor(System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the Order class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.OrderID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.ClOrdID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.ClOrdLinkID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.Account">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.Side">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.SimpleOrderQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.OrderQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.Price">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.DisplayQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.StopPx">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.PegOffsetValue">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.PegPriceType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.SettlCurrency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.OrdType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.TimeInForce">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.ExecInst">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.ContingencyType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.ExDestination">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.OrdStatus">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.Triggered">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.WorkingIndicator">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.OrdRejReason">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.SimpleLeavesQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.LeavesQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.SimpleCumQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.CumQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.AvgPx">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.MultiLegReportingType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.Text">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.TransactTime">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Order.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook">
            <summary>
            Level 2 Book Data
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook.#ctor">
            <summary>
            Initializes a new instance of the OrderBook class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook.#ctor(System.String,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the OrderBook class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook.Level">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook.BidSize">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook.BidPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook.AskPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook.AskSize">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBook.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBookL2.#ctor">
            <summary>
            Initializes a new instance of the OrderBookL2 class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBookL2.#ctor(System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the OrderBookL2 class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBookL2.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBookL2.Id">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBookL2.Side">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBookL2.Size">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBookL2.Price">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.OrderBookL2.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position">
            <summary>
            Summary of Open and Closed Positions
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.#ctor">
            <summary>
            Initializes a new instance of the Position class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.#ctor(System.Double,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Position class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.Account">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.Underlying">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.QuoteCurrency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.Commission">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.InitMarginReq">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.MaintMarginReq">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.RiskLimit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.Leverage">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.CrossMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.DeleveragePercentile">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.RebalancedPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PrevRealisedPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PrevUnrealisedPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PrevClosePrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.OpeningTimestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.OpeningQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.OpeningCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.OpeningComm">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.OpenOrderBuyQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.OpenOrderBuyCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.OpenOrderBuyPremium">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.OpenOrderSellQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.OpenOrderSellCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.OpenOrderSellPremium">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.ExecBuyQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.ExecBuyCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.ExecSellQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.ExecSellCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.ExecQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.ExecCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.ExecComm">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.CurrentTimestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.CurrentQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.CurrentCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.CurrentComm">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.RealisedCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.UnrealisedCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.GrossOpenCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.GrossOpenPremium">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.GrossExecCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.IsOpen">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.MarkPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.MarkValue">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.RiskValue">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.HomeNotional">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.ForeignNotional">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PosState">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PosCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PosCost2">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PosCross">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PosInit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PosComm">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PosLoss">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PosMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PosMaint">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.PosAllowance">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.TaxableMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.InitMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.MaintMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.SessionMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.TargetExcessMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.VarMargin">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.RealisedGrossPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.RealisedTax">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.RealisedPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.UnrealisedGrossPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.LongBankrupt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.ShortBankrupt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.TaxBase">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.IndicativeTaxRate">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.IndicativeTax">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.UnrealisedTax">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.UnrealisedPnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.UnrealisedPnlPcnt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.UnrealisedRoePcnt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.SimpleQty">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.SimpleCost">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.SimpleValue">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.SimplePnl">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.SimplePnlPcnt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.AvgCostPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.AvgEntryPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.BreakEvenPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.MarginCallPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.LiquidationPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.BankruptPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.LastPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.LastValue">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Position.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Quote">
            <summary>
            Best Bid/Offer Snapshots &amp; Historical Bins
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Quote.#ctor">
            <summary>
            Initializes a new instance of the Quote class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Quote.#ctor(System.DateTime,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Quote class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Quote.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Quote.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Quote.BidSize">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Quote.BidPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Quote.AskPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Quote.AskSize">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Quote.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement">
            <summary>
            Historical Settlement Data
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement.#ctor">
            <summary>
            Initializes a new instance of the Settlement class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement.#ctor(System.DateTime,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Settlement class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement.SettlementType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement.SettledPrice">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement.Bankrupt">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement.TaxBase">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement.TaxRate">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Settlement.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Stats">
            <summary>
            Exchange Statistics
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Stats.#ctor">
            <summary>
            Initializes a new instance of the Stats class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Stats.#ctor(System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Stats class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Stats.RootSymbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Stats.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Stats.Volume24h">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Stats.Turnover24h">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Stats.OpenInterest">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Stats.OpenValue">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Stats.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsHistory.#ctor">
            <summary>
            Initializes a new instance of the StatsHistory class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsHistory.#ctor(System.DateTime,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the StatsHistory class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsHistory.Date">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsHistory.RootSymbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsHistory.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsHistory.Volume">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsHistory.Turnover">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsHistory.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsUSD.#ctor">
            <summary>
            Initializes a new instance of the StatsUSD class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsUSD.#ctor(System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the StatsUSD class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsUSD.RootSymbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsUSD.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsUSD.Turnover24h">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsUSD.Turnover30d">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsUSD.Turnover365d">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsUSD.Turnover">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.StatsUSD.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade">
            <summary>
            Individual &amp; Bucketed Trades
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.#ctor">
            <summary>
            Initializes a new instance of the Trade class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.#ctor(System.DateTime,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Trade class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.Side">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.Size">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.Price">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.TickDirection">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.TrdMatchID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.GrossValue">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.HomeNotional">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.ForeignNotional">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Trade.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.#ctor">
            <summary>
            Initializes a new instance of the TradeBin class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.#ctor(System.DateTime,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the TradeBin class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.Symbol">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.Open">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.High">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.Low">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.Close">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.Trades">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.Volume">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.Vwap">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.LastSize">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.Turnover">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.HomeNotional">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.ForeignNotional">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.TradeBin.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.#ctor">
            <summary>
            Initializes a new instance of the Transaction class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.#ctor(System.String,System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the Transaction class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.TransactID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.Account">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.TransactType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.Amount">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.Fee">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.TransactStatus">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.Address">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.Tx">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.Text">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.TransactTime">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Transaction.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.AutorestClient.Models.User">
            <summary>
            Account Operations
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.#ctor">
            <summary>
            Initializes a new instance of the User class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.#ctor(System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the User class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.Id">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.OwnerId">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.Firstname">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.Lastname">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.Username">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.Email">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.Phone">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.Created">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.LastUpdated">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.Preferences">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.TFAEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.AffiliateID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.PgpPubKey">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.Country">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.User.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserCommission.#ctor">
            <summary>
            Initializes a new instance of the UserCommission class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserCommission.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the UserCommission class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserCommission.MakerFee">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserCommission.TakerFee">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserCommission.SettlementFee">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserCommission.MaxFee">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.#ctor">
            <summary>
            Initializes a new instance of the UserPreferences class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Double},System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{System.String},System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the UserPreferences class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.AlertOnLiquidations">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.AnimationsEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.AnnouncementsLastSeen">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.ChatChannelID">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.ColorTheme">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.Debug">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.DisableEmails">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.HideConfirmDialogs">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.HideConnectionModal">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.HideFromLeaderboard">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.HideNameFromLeaderboard">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.HideNotifications">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.Locale">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.MsgsSeen">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.OrderBookBinning">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.OrderBookType">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.OrderClearImmediate">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.OrderControlsPlusMinus">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.Sounds">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.StrictIPCheck">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.StrictTimeout">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.TickerGroup">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.TickerPinned">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.UserPreferences.TradeLayout">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.#ctor">
            <summary>
            Initializes a new instance of the Wallet class.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.#ctor(System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the Wallet class.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.Account">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.PrevDeposited">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.PrevWithdrawn">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.PrevTransferIn">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.PrevTransferOut">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.PrevAmount">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.PrevTimestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.DeltaDeposited">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.DeltaWithdrawn">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.DeltaTransferIn">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.DeltaTransferOut">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.DeltaAmount">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.Deposited">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.Withdrawn">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.TransferIn">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.TransferOut">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.Amount">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.PendingCredit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.PendingDebit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.ConfirmedDebit">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.Timestamp">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.Addr">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.Script">
            <summary>
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.WithdrawalLock">
            <summary>
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.AutorestClient.Models.Wallet.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.HistoricalData.LineParsers.ParseMTLine(System.String)">
            <summary>
            Parse string: 2011.01.02,17:00,1.247600,1.247600,1.247600,1.247600,0
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.HistoricalData.LineParsers.ParseNTLine(System.String)">
            <summary>
            Parse string: 20110731 235958;1.138900;0
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.HistoricalData.LineParsers.ParseTickLine(System.String)">
            <summary>
            Prase file such as:
            Gmt time,Ask,Bid,AskVolume,BidVolume
            31.07.2011 23:00:00.652,1.13729,1.13699,2.25,1.13
            31.07.2011 23:00:00.885,1.13733,1.1370200000000001,2.25,1.13
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.Icm.IcmExchange.StartRabbitConnection">
            <summary>
            For ICM we use internal RabbitMQ exchange with pricefeed
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.Kraken.Endpoints.PublicData">
            <summary>
            Endpoint to Public data from API
            see https://www.kraken.com/help/api#public-market-data
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Kraken.Entities.Ticker.Open">
            <summary>
            Today's opening price
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Kraken.Entities.TradeBalanceInfo.Equity">
            <summary>
            Trade balance + unrealized net profit/loss
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Kraken.Responses.CancelOrderResult.Count">
            <summary>
            Number of orders canceled
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Kraken.Responses.CancelOrderResult.Pending">
            <summary>
            If set, order(s) is/are pending cancellation
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.LykkeExchange.Entities.MarketOrderResponse.Result">
            <summary>
            average execution price
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.Oanda.Entities.Accounts.AccountInstrumentsResponse">
            <summary>
            The list of tradeable instruments for the Account has been provided.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Accounts.AccountInstrumentsResponse.Instruments">
            <summary>
            The requested list of instruments.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Accounts.AccountInstrumentsResponse.LastTransactionID">
            <summary>
            The ID of the most recent Transaction created for the Account.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlesResponse.Instrument">
            <summary>
            The instrument whose Prices are represented by the candlesticks.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlesResponse.Granularity">
            <summary>
            The granularity of the candlesticks provided.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlesResponse.Candles">
            <summary>
            The list of candlesticks that satisfy the request.
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.Candlestick">
            <summary>
            http://developer.oanda.com/rest-live-v20/instrument-df/#Candlestick
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.Candlestick.Time">
            <summary>
            The start time of the candlestick
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.Candlestick.Bid">
            <summary>
            The candlestick data based on bids. Only provided if bid-based candles
            were requested.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.Candlestick.Ask">
            <summary>
            The candlestick data based on asks. Only provided if ask-based candles
            were requested.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.Candlestick.Mid">
            <summary>
            The candlestick data based on midpoints. Only provided if midpoint-based
            candles were requested.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.Candlestick.Volume">
            <summary>
            The number of prices created during the time-range represented by the
            candlestick.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.Candlestick.Complete">
            <summary>
            A flag indicating if the candlestick is complete. A complete candlestick
            is one whose ending time is not in the future.
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickData">
            <summary>
            http://developer.oanda.com/rest-live-v20/instrument-df/#CandlestickData
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickData.Open">
            <summary>
            The first (open) price in the time-range represented by the candlestick.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickData.Highest">
            <summary>
            The highest price in the time-range represented by the candlestick.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickData.Lowest">
            <summary>
            The lowest price in the time-range represented by the candlestick.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickData.Closing">
            <summary>
            The last (closing) price in the time-range represented by the
            candlestick.
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity">
            <summary>
            http://developer.oanda.com/rest-live-v20/instrument-df/#CandlestickGranularity
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.S5">
            <summary>
            5 second candlesticks, minute alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.S10">
            <summary>
            10 second candlesticks, minute alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.S15">
            <summary>
            15 second candlesticks, minute alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.S30">
            <summary>
            30 second candlesticks, minute alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.M1">
            <summary>
            1 minute candlesticks, minute alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.M2">
            <summary>
            2 minute candlesticks, hour alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.M4">
            <summary>
            4 minute candlesticks, hour alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.M5">
            <summary>
            5 minute candlesticks, hour alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.M10">
            <summary>
            10 minute candlesticks, hour alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.M15">
            <summary>
            15 minute candlesticks, hour alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.M30">
            <summary>
            30 minute candlesticks, hour alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.H1">
            <summary>
            1 hour candlesticks, hour alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.H2">
            <summary>
            2 hour candlesticks, day alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.H3">
            <summary>
            3 hour candlesticks, day alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.H4">
            <summary>
            4 hour candlesticks, day alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.H6">
            <summary>
            6 hour candlesticks, day alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.H8">
            <summary>
            8 hour candlesticks, day alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.H12">
            <summary>
            12 hour candlesticks, day alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.D">
            <summary>
            1 day candlesticks, day alignment
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.W">
            <summary>
            1 week candlesticks, aligned to start of week
            </summary>
        </member>
        <member name="F:TradingBot.Exchanges.Concrete.Oanda.Entities.Instruments.CandlestickGranularity.M">
            <summary>
            1 month candlesticks, aligned to first day of the month
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.Price">
            <summary>
            The specification of an Account-specific Price.
            http://developer.oanda.com/rest-live-v20/pricing-df/#Price
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.Price.Instrument">
            <summary>
            The Priceâ€™s Instrument.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.Price.Time">
            <summary>
            The date/time when the Price was created
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.Price.Tradeable">
            <summary>
            Flag indicating if the Price is tradeable or not
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.Price.Bids">
            <summary>
            The list of prices and liquidity available on the Instrumentâ€™s bid side.
            It is possible for this list to be empty if there is no bid liquidity
            currently available for the Instrument in the Account.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.Price.Asks">
            <summary>
            The list of prices and liquidity available on the Instrumentâ€™s ask side.
            It is possible for this list to be empty if there is no ask liquidity
            currently available for the Instrument in the Account.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.Price.CloseoutBid">
            <summary>
            The closeout bid Price. This Price is used when a bid is required to
            closeout a Position (margin closeout or manual) yet there is no bid
            liquidity. The closeout bid is never used to open a new position.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.Price.CloseoutAsk">
            <summary>
            The closeout ask Price. This Price is used when a ask is required to
            closeout a Position (margin closeout or manual) yet there is no ask
            liquidity. The closeout ask is never used to open a new position.
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.PriceBucket">
            <summary>
            A Price Bucket represents a price available for an amount of liquidity.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.PriceBucket.Price">
            <summary>
            The Price offered by the PriceBucket.
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.PriceBucket.Liquidity">
            <summary>
            The amount of liquidity offered by the PriceBucket.
            </summary>
        </member>
        <member name="T:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.PriceHeartbeat">
            <summary>
            A PricingHeartbeat object is injected into the Pricing stream to ensure that the HTTP connection remains active.
            http://developer.oanda.com/rest-live-v20/pricing-df/#PricingHeartbeat
            </summary>
        </member>
        <member name="P:TradingBot.Exchanges.Concrete.Oanda.Entities.Prices.PriceHeartbeat.Time">
            <summary>
            The date/time when the Heartbeat was created.
            </summary>
        </member>
        <member name="M:TradingBot.Exchanges.Concrete.StubImplementation.GeometricalBrownianMotion.#ctor(System.Double,System.Double,System.Double,System.Int64,System.Double,System.Random)">
            <param name="initialValue">initial value</param>
            <param name="sigma">expected annual volatility</param>
            <param name="nYears">number of years</param>
            <param name="nGenerations">total number of generations</param>
            <param name="mu">yearly trend</param>
            <param name="random">the source of randomness</param>
        </member>
        <member name="M:TradingBot.Infrastructure.Configuration.RabbitMqConfiguration.GetConnectionString">
            <summary>
            see https://www.rabbitmq.com/uri-spec.html
            </summary>
        </member>
        <member name="P:TradingBot.Models.Api.OrderModel.DateTime">
            <summary>
            Date and time must be in 5 minutes threshold from UTC now
            </summary>
        </member>
        <member name="T:TradingBot.Models.IsAliveResponseModel">
            <summary>
            Checks service is alive response
            </summary>
        </member>
        <member name="P:TradingBot.Models.IsAliveResponseModel.Version">
            <summary>API version</summary>
        </member>
        <member name="P:TradingBot.Models.IsAliveResponseModel.Env">
            <summary>Environment variables</summary>
        </member>
        <member name="F:TradingBot.Trading.Position.initialValue">
            <summary>
            Initial amount of assets (base asset of the Instrument)
            </summary>
        </member>
    </members>
</doc>
