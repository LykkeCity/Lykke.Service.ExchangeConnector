// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using Microsoft.Rest;
using Newtonsoft.Json;

namespace Lykke.ExternalExchangesApi.Exchanges.BitMex.AutorestClient.Models
{
    /// <summary>
    /// Tradeable Contracts, Indices, and History
    /// </summary>
    public partial class Instrument
    {
        /// <summary>
        /// Initializes a new instance of the Instrument class.
        /// </summary>
        public Instrument()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Instrument class.
        /// </summary>
        public Instrument(string symbol, string rootSymbol = default(string), string state = default(string), string typ = default(string), System.DateTime? listing = default(System.DateTime?), System.DateTime? front = default(System.DateTime?), System.DateTime? expiry = default(System.DateTime?), System.DateTime? settle = default(System.DateTime?), System.DateTime? relistInterval = default(System.DateTime?), string inverseLeg = default(string), string sellLeg = default(string), string buyLeg = default(string), string positionCurrency = default(string), string underlying = default(string), string quoteCurrency = default(string), string underlyingSymbol = default(string), string reference = default(string), string referenceSymbol = default(string), System.DateTime? calcInterval = default(System.DateTime?), System.DateTime? publishInterval = default(System.DateTime?), System.DateTime? publishTime = default(System.DateTime?), double? maxOrderQty = default(double?), double? maxPrice = default(double?), double? lotSize = default(double?), double? tickSize = default(double?), double? multiplier = default(double?), string settlCurrency = default(string), double? underlyingToPositionMultiplier = default(double?), double? underlyingToSettleMultiplier = default(double?), double? quoteToSettleMultiplier = default(double?), bool? isQuanto = default(bool?), bool? isInverse = default(bool?), double? initMargin = default(double?), double? maintMargin = default(double?), double? riskLimit = default(double?), double? riskStep = default(double?), double? limit = default(double?), bool? capped = default(bool?), bool? taxed = default(bool?), bool? deleverage = default(bool?), double? makerFee = default(double?), double? takerFee = default(double?), double? settlementFee = default(double?), double? insuranceFee = default(double?), string fundingBaseSymbol = default(string), string fundingQuoteSymbol = default(string), string fundingPremiumSymbol = default(string), System.DateTime? fundingTimestamp = default(System.DateTime?), System.DateTime? fundingInterval = default(System.DateTime?), double? fundingRate = default(double?), double? indicativeFundingRate = default(double?), System.DateTime? rebalanceTimestamp = default(System.DateTime?), System.DateTime? rebalanceInterval = default(System.DateTime?), System.DateTime? openingTimestamp = default(System.DateTime?), System.DateTime? closingTimestamp = default(System.DateTime?), System.DateTime? sessionInterval = default(System.DateTime?), double? prevClosePrice = default(double?), double? limitDownPrice = default(double?), double? limitUpPrice = default(double?), double? bankruptLimitDownPrice = default(double?), double? bankruptLimitUpPrice = default(double?), double? prevTotalVolume = default(double?), double? totalVolume = default(double?), double? volume = default(double?), double? volume24h = default(double?), double? prevTotalTurnover = default(double?), double? totalTurnover = default(double?), double? turnover = default(double?), double? turnover24h = default(double?), double? prevPrice24h = default(double?), double? vwap = default(double?), double? highPrice = default(double?), double? lowPrice = default(double?), double? lastPrice = default(double?), double? lastPriceProtected = default(double?), string lastTickDirection = default(string), double? lastChangePcnt = default(double?), double? bidPrice = default(double?), double? midPrice = default(double?), double? askPrice = default(double?), double? impactBidPrice = default(double?), double? impactMidPrice = default(double?), double? impactAskPrice = default(double?), bool? hasLiquidity = default(bool?), double? openInterest = default(double?), double? openValue = default(double?), string fairMethod = default(string), double? fairBasisRate = default(double?), double? fairBasis = default(double?), double? fairPrice = default(double?), string markMethod = default(string), double? markPrice = default(double?), double? indicativeTaxRate = default(double?), double? indicativeSettlePrice = default(double?), double? settledPrice = default(double?), System.DateTime? timestamp = default(System.DateTime?))
        {
            Symbol = symbol;
            RootSymbol = rootSymbol;
            State = state;
            Typ = typ;
            Listing = listing;
            Front = front;
            Expiry = expiry;
            Settle = settle;
            RelistInterval = relistInterval;
            InverseLeg = inverseLeg;
            SellLeg = sellLeg;
            BuyLeg = buyLeg;
            PositionCurrency = positionCurrency;
            Underlying = underlying;
            QuoteCurrency = quoteCurrency;
            UnderlyingSymbol = underlyingSymbol;
            Reference = reference;
            ReferenceSymbol = referenceSymbol;
            CalcInterval = calcInterval;
            PublishInterval = publishInterval;
            PublishTime = publishTime;
            MaxOrderQty = maxOrderQty;
            MaxPrice = maxPrice;
            LotSize = lotSize;
            TickSize = tickSize;
            Multiplier = multiplier;
            SettlCurrency = settlCurrency;
            UnderlyingToPositionMultiplier = underlyingToPositionMultiplier;
            UnderlyingToSettleMultiplier = underlyingToSettleMultiplier;
            QuoteToSettleMultiplier = quoteToSettleMultiplier;
            IsQuanto = isQuanto;
            IsInverse = isInverse;
            InitMargin = initMargin;
            MaintMargin = maintMargin;
            RiskLimit = riskLimit;
            RiskStep = riskStep;
            Limit = limit;
            Capped = capped;
            Taxed = taxed;
            Deleverage = deleverage;
            MakerFee = makerFee;
            TakerFee = takerFee;
            SettlementFee = settlementFee;
            InsuranceFee = insuranceFee;
            FundingBaseSymbol = fundingBaseSymbol;
            FundingQuoteSymbol = fundingQuoteSymbol;
            FundingPremiumSymbol = fundingPremiumSymbol;
            FundingTimestamp = fundingTimestamp;
            FundingInterval = fundingInterval;
            FundingRate = fundingRate;
            IndicativeFundingRate = indicativeFundingRate;
            RebalanceTimestamp = rebalanceTimestamp;
            RebalanceInterval = rebalanceInterval;
            OpeningTimestamp = openingTimestamp;
            ClosingTimestamp = closingTimestamp;
            SessionInterval = sessionInterval;
            PrevClosePrice = prevClosePrice;
            LimitDownPrice = limitDownPrice;
            LimitUpPrice = limitUpPrice;
            BankruptLimitDownPrice = bankruptLimitDownPrice;
            BankruptLimitUpPrice = bankruptLimitUpPrice;
            PrevTotalVolume = prevTotalVolume;
            TotalVolume = totalVolume;
            Volume = volume;
            Volume24h = volume24h;
            PrevTotalTurnover = prevTotalTurnover;
            TotalTurnover = totalTurnover;
            Turnover = turnover;
            Turnover24h = turnover24h;
            PrevPrice24h = prevPrice24h;
            Vwap = vwap;
            HighPrice = highPrice;
            LowPrice = lowPrice;
            LastPrice = lastPrice;
            LastPriceProtected = lastPriceProtected;
            LastTickDirection = lastTickDirection;
            LastChangePcnt = lastChangePcnt;
            BidPrice = bidPrice;
            MidPrice = midPrice;
            AskPrice = askPrice;
            ImpactBidPrice = impactBidPrice;
            ImpactMidPrice = impactMidPrice;
            ImpactAskPrice = impactAskPrice;
            HasLiquidity = hasLiquidity;
            OpenInterest = openInterest;
            OpenValue = openValue;
            FairMethod = fairMethod;
            FairBasisRate = fairBasisRate;
            FairBasis = fairBasis;
            FairPrice = fairPrice;
            MarkMethod = markMethod;
            MarkPrice = markPrice;
            IndicativeTaxRate = indicativeTaxRate;
            IndicativeSettlePrice = indicativeSettlePrice;
            SettledPrice = settledPrice;
            Timestamp = timestamp;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rootSymbol")]
        public string RootSymbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typ")]
        public string Typ { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "listing")]
        public System.DateTime? Listing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "front")]
        public System.DateTime? Front { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "expiry")]
        public System.DateTime? Expiry { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settle")]
        public System.DateTime? Settle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relistInterval")]
        public System.DateTime? RelistInterval { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inverseLeg")]
        public string InverseLeg { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sellLeg")]
        public string SellLeg { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "buyLeg")]
        public string BuyLeg { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "positionCurrency")]
        public string PositionCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "underlying")]
        public string Underlying { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quoteCurrency")]
        public string QuoteCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "underlyingSymbol")]
        public string UnderlyingSymbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reference")]
        public string Reference { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "referenceSymbol")]
        public string ReferenceSymbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "calcInterval")]
        public System.DateTime? CalcInterval { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "publishInterval")]
        public System.DateTime? PublishInterval { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "publishTime")]
        public System.DateTime? PublishTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxOrderQty")]
        public double? MaxOrderQty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxPrice")]
        public double? MaxPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lotSize")]
        public double? LotSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tickSize")]
        public double? TickSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multiplier")]
        public double? Multiplier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settlCurrency")]
        public string SettlCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "underlyingToPositionMultiplier")]
        public double? UnderlyingToPositionMultiplier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "underlyingToSettleMultiplier")]
        public double? UnderlyingToSettleMultiplier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quoteToSettleMultiplier")]
        public double? QuoteToSettleMultiplier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isQuanto")]
        public bool? IsQuanto { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isInverse")]
        public bool? IsInverse { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "initMargin")]
        public double? InitMargin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maintMargin")]
        public double? MaintMargin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "riskLimit")]
        public double? RiskLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "riskStep")]
        public double? RiskStep { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "limit")]
        public double? Limit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "capped")]
        public bool? Capped { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxed")]
        public bool? Taxed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deleverage")]
        public bool? Deleverage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "makerFee")]
        public double? MakerFee { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "takerFee")]
        public double? TakerFee { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settlementFee")]
        public double? SettlementFee { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "insuranceFee")]
        public double? InsuranceFee { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fundingBaseSymbol")]
        public string FundingBaseSymbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fundingQuoteSymbol")]
        public string FundingQuoteSymbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fundingPremiumSymbol")]
        public string FundingPremiumSymbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fundingTimestamp")]
        public System.DateTime? FundingTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fundingInterval")]
        public System.DateTime? FundingInterval { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fundingRate")]
        public double? FundingRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "indicativeFundingRate")]
        public double? IndicativeFundingRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rebalanceTimestamp")]
        public System.DateTime? RebalanceTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rebalanceInterval")]
        public System.DateTime? RebalanceInterval { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openingTimestamp")]
        public System.DateTime? OpeningTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "closingTimestamp")]
        public System.DateTime? ClosingTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sessionInterval")]
        public System.DateTime? SessionInterval { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prevClosePrice")]
        public double? PrevClosePrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "limitDownPrice")]
        public double? LimitDownPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "limitUpPrice")]
        public double? LimitUpPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bankruptLimitDownPrice")]
        public double? BankruptLimitDownPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bankruptLimitUpPrice")]
        public double? BankruptLimitUpPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prevTotalVolume")]
        public double? PrevTotalVolume { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalVolume")]
        public double? TotalVolume { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "volume")]
        public double? Volume { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "volume24h")]
        public double? Volume24h { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prevTotalTurnover")]
        public double? PrevTotalTurnover { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalTurnover")]
        public double? TotalTurnover { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "turnover")]
        public double? Turnover { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "turnover24h")]
        public double? Turnover24h { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prevPrice24h")]
        public double? PrevPrice24h { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vwap")]
        public double? Vwap { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "highPrice")]
        public double? HighPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lowPrice")]
        public double? LowPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastPrice")]
        public double? LastPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastPriceProtected")]
        public double? LastPriceProtected { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastTickDirection")]
        public string LastTickDirection { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastChangePcnt")]
        public double? LastChangePcnt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bidPrice")]
        public double? BidPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "midPrice")]
        public double? MidPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "askPrice")]
        public double? AskPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "impactBidPrice")]
        public double? ImpactBidPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "impactMidPrice")]
        public double? ImpactMidPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "impactAskPrice")]
        public double? ImpactAskPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasLiquidity")]
        public bool? HasLiquidity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openInterest")]
        public double? OpenInterest { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openValue")]
        public double? OpenValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fairMethod")]
        public string FairMethod { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fairBasisRate")]
        public double? FairBasisRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fairBasis")]
        public double? FairBasis { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fairPrice")]
        public double? FairPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "markMethod")]
        public string MarkMethod { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "markPrice")]
        public double? MarkPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "indicativeTaxRate")]
        public double? IndicativeTaxRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "indicativeSettlePrice")]
        public double? IndicativeSettlePrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settledPrice")]
        public double? SettledPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Symbol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Symbol");
            }
        }
    }
}
