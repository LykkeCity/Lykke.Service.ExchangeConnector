// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using Microsoft.Rest;
using Newtonsoft.Json;

namespace Lykke.ExternalExchangesApi.Exchanges.BitMex.AutorestClient.Models
{
    /// <summary>
    /// Individual &amp; Bucketed Trades
    /// </summary>
    public partial class Trade
    {
        /// <summary>
        /// Initializes a new instance of the Trade class.
        /// </summary>
        public Trade()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Trade class.
        /// </summary>
        public Trade(System.DateTime timestamp, string symbol, string side = default(string), double? size = default(double?), double? price = default(double?), string tickDirection = default(string), string trdMatchID = default(string), double? grossValue = default(double?), double? homeNotional = default(double?), double? foreignNotional = default(double?))
        {
            Timestamp = timestamp;
            Symbol = symbol;
            Side = side;
            Size = size;
            Price = price;
            TickDirection = tickDirection;
            TrdMatchID = trdMatchID;
            GrossValue = grossValue;
            HomeNotional = homeNotional;
            ForeignNotional = foreignNotional;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "side")]
        public string Side { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public double? Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "price")]
        public double? Price { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tickDirection")]
        public string TickDirection { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trdMatchID")]
        public string TrdMatchID { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "grossValue")]
        public double? GrossValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "homeNotional")]
        public double? HomeNotional { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "foreignNotional")]
        public double? ForeignNotional { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Symbol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Symbol");
            }
        }
    }
}
