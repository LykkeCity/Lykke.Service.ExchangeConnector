// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using Microsoft.Rest;
using Newtonsoft.Json;

namespace Lykke.ExternalExchangesApi.Exchanges.BitMex.AutorestClient.Models
{
    public partial class OrderBookL2
    {
        /// <summary>
        /// Initializes a new instance of the OrderBookL2 class.
        /// </summary>
        public OrderBookL2()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OrderBookL2 class.
        /// </summary>
        public OrderBookL2(string symbol, double id, string side, double? size = default(double?), double? price = default(double?))
        {
            Symbol = symbol;
            Id = id;
            Side = side;
            Size = size;
            Price = price;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public double Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "side")]
        public string Side { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public double? Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "price")]
        public double? Price { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Symbol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Symbol");
            }
            if (Side == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Side");
            }
        }
    }
}
