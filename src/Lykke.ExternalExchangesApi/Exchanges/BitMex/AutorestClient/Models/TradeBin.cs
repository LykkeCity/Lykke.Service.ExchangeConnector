// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using Microsoft.Rest;
using Newtonsoft.Json;

namespace Lykke.ExternalExchangesApi.Exchanges.BitMex.AutorestClient.Models
{
    public partial class TradeBin
    {
        /// <summary>
        /// Initializes a new instance of the TradeBin class.
        /// </summary>
        public TradeBin()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TradeBin class.
        /// </summary>
        public TradeBin(System.DateTime timestamp, string symbol, double? open = default(double?), double? high = default(double?), double? low = default(double?), double? close = default(double?), double? trades = default(double?), double? volume = default(double?), double? vwap = default(double?), double? lastSize = default(double?), double? turnover = default(double?), double? homeNotional = default(double?), double? foreignNotional = default(double?))
        {
            Timestamp = timestamp;
            Symbol = symbol;
            Open = open;
            High = high;
            Low = low;
            Close = close;
            Trades = trades;
            Volume = volume;
            Vwap = vwap;
            LastSize = lastSize;
            Turnover = turnover;
            HomeNotional = homeNotional;
            ForeignNotional = foreignNotional;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "open")]
        public double? Open { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "high")]
        public double? High { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "low")]
        public double? Low { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "close")]
        public double? Close { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trades")]
        public double? Trades { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "volume")]
        public double? Volume { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vwap")]
        public double? Vwap { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastSize")]
        public double? LastSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "turnover")]
        public double? Turnover { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "homeNotional")]
        public double? HomeNotional { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "foreignNotional")]
        public double? ForeignNotional { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Symbol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Symbol");
            }
        }
    }
}
