// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TradingBot.Exchanges.Concrete.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Active Liquidations
    /// </summary>
    public partial class Liquidation
    {
        /// <summary>
        /// Initializes a new instance of the Liquidation class.
        /// </summary>
        public Liquidation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Liquidation class.
        /// </summary>
        public Liquidation(string orderID, string symbol = default(string), string side = default(string), double? price = default(double?), double? leavesQty = default(double?))
        {
            OrderID = orderID;
            Symbol = symbol;
            Side = side;
            Price = price;
            LeavesQty = leavesQty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orderID")]
        public string OrderID { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "side")]
        public string Side { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "price")]
        public double? Price { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "leavesQty")]
        public double? LeavesQty { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OrderID == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrderID");
            }
        }
    }
}
