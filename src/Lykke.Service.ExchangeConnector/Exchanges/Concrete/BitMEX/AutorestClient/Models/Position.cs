// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TradingBot.Exchanges.Concrete.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Summary of Open and Closed Positions
    /// </summary>
    public partial class Position
    {
        /// <summary>
        /// Initializes a new instance of the Position class.
        /// </summary>
        public Position()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Position class.
        /// </summary>
        public Position(double account, string symbol, string currency, string underlying = default(string), string quoteCurrency = default(string), double? commission = default(double?), double? initMarginReq = default(double?), double? maintMarginReq = default(double?), double? riskLimit = default(double?), double? leverage = default(double?), bool? crossMargin = default(bool?), double? deleveragePercentile = default(double?), double? rebalancedPnl = default(double?), double? prevRealisedPnl = default(double?), double? prevUnrealisedPnl = default(double?), double? prevClosePrice = default(double?), System.DateTime? openingTimestamp = default(System.DateTime?), double? openingQty = default(double?), double? openingCost = default(double?), double? openingComm = default(double?), double? openOrderBuyQty = default(double?), double? openOrderBuyCost = default(double?), double? openOrderBuyPremium = default(double?), double? openOrderSellQty = default(double?), double? openOrderSellCost = default(double?), double? openOrderSellPremium = default(double?), double? execBuyQty = default(double?), double? execBuyCost = default(double?), double? execSellQty = default(double?), double? execSellCost = default(double?), double? execQty = default(double?), double? execCost = default(double?), double? execComm = default(double?), System.DateTime? currentTimestamp = default(System.DateTime?), double? currentQty = default(double?), double? currentCost = default(double?), double? currentComm = default(double?), double? realisedCost = default(double?), double? unrealisedCost = default(double?), double? grossOpenCost = default(double?), double? grossOpenPremium = default(double?), double? grossExecCost = default(double?), bool? isOpen = default(bool?), double? markPrice = default(double?), double? markValue = default(double?), double? riskValue = default(double?), double? homeNotional = default(double?), double? foreignNotional = default(double?), string posState = default(string), double? posCost = default(double?), double? posCost2 = default(double?), double? posCross = default(double?), double? posInit = default(double?), double? posComm = default(double?), double? posLoss = default(double?), double? posMargin = default(double?), double? posMaint = default(double?), double? posAllowance = default(double?), double? taxableMargin = default(double?), double? initMargin = default(double?), double? maintMargin = default(double?), double? sessionMargin = default(double?), double? targetExcessMargin = default(double?), double? varMargin = default(double?), double? realisedGrossPnl = default(double?), double? realisedTax = default(double?), double? realisedPnl = default(double?), double? unrealisedGrossPnl = default(double?), double? longBankrupt = default(double?), double? shortBankrupt = default(double?), double? taxBase = default(double?), double? indicativeTaxRate = default(double?), double? indicativeTax = default(double?), double? unrealisedTax = default(double?), double? unrealisedPnl = default(double?), double? unrealisedPnlPcnt = default(double?), double? unrealisedRoePcnt = default(double?), double? simpleQty = default(double?), double? simpleCost = default(double?), double? simpleValue = default(double?), double? simplePnl = default(double?), double? simplePnlPcnt = default(double?), double? avgCostPrice = default(double?), double? avgEntryPrice = default(double?), double? breakEvenPrice = default(double?), double? marginCallPrice = default(double?), double? liquidationPrice = default(double?), double? bankruptPrice = default(double?), System.DateTime? timestamp = default(System.DateTime?), double? lastPrice = default(double?), double? lastValue = default(double?))
        {
            Account = account;
            Symbol = symbol;
            Currency = currency;
            Underlying = underlying;
            QuoteCurrency = quoteCurrency;
            Commission = commission;
            InitMarginReq = initMarginReq;
            MaintMarginReq = maintMarginReq;
            RiskLimit = riskLimit;
            Leverage = leverage;
            CrossMargin = crossMargin;
            DeleveragePercentile = deleveragePercentile;
            RebalancedPnl = rebalancedPnl;
            PrevRealisedPnl = prevRealisedPnl;
            PrevUnrealisedPnl = prevUnrealisedPnl;
            PrevClosePrice = prevClosePrice;
            OpeningTimestamp = openingTimestamp;
            OpeningQty = openingQty;
            OpeningCost = openingCost;
            OpeningComm = openingComm;
            OpenOrderBuyQty = openOrderBuyQty;
            OpenOrderBuyCost = openOrderBuyCost;
            OpenOrderBuyPremium = openOrderBuyPremium;
            OpenOrderSellQty = openOrderSellQty;
            OpenOrderSellCost = openOrderSellCost;
            OpenOrderSellPremium = openOrderSellPremium;
            ExecBuyQty = execBuyQty;
            ExecBuyCost = execBuyCost;
            ExecSellQty = execSellQty;
            ExecSellCost = execSellCost;
            ExecQty = execQty;
            ExecCost = execCost;
            ExecComm = execComm;
            CurrentTimestamp = currentTimestamp;
            CurrentQty = currentQty;
            CurrentCost = currentCost;
            CurrentComm = currentComm;
            RealisedCost = realisedCost;
            UnrealisedCost = unrealisedCost;
            GrossOpenCost = grossOpenCost;
            GrossOpenPremium = grossOpenPremium;
            GrossExecCost = grossExecCost;
            IsOpen = isOpen;
            MarkPrice = markPrice;
            MarkValue = markValue;
            RiskValue = riskValue;
            HomeNotional = homeNotional;
            ForeignNotional = foreignNotional;
            PosState = posState;
            PosCost = posCost;
            PosCost2 = posCost2;
            PosCross = posCross;
            PosInit = posInit;
            PosComm = posComm;
            PosLoss = posLoss;
            PosMargin = posMargin;
            PosMaint = posMaint;
            PosAllowance = posAllowance;
            TaxableMargin = taxableMargin;
            InitMargin = initMargin;
            MaintMargin = maintMargin;
            SessionMargin = sessionMargin;
            TargetExcessMargin = targetExcessMargin;
            VarMargin = varMargin;
            RealisedGrossPnl = realisedGrossPnl;
            RealisedTax = realisedTax;
            RealisedPnl = realisedPnl;
            UnrealisedGrossPnl = unrealisedGrossPnl;
            LongBankrupt = longBankrupt;
            ShortBankrupt = shortBankrupt;
            TaxBase = taxBase;
            IndicativeTaxRate = indicativeTaxRate;
            IndicativeTax = indicativeTax;
            UnrealisedTax = unrealisedTax;
            UnrealisedPnl = unrealisedPnl;
            UnrealisedPnlPcnt = unrealisedPnlPcnt;
            UnrealisedRoePcnt = unrealisedRoePcnt;
            SimpleQty = simpleQty;
            SimpleCost = simpleCost;
            SimpleValue = simpleValue;
            SimplePnl = simplePnl;
            SimplePnlPcnt = simplePnlPcnt;
            AvgCostPrice = avgCostPrice;
            AvgEntryPrice = avgEntryPrice;
            BreakEvenPrice = breakEvenPrice;
            MarginCallPrice = marginCallPrice;
            LiquidationPrice = liquidationPrice;
            BankruptPrice = bankruptPrice;
            Timestamp = timestamp;
            LastPrice = lastPrice;
            LastValue = lastValue;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "account")]
        public double Account { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "underlying")]
        public string Underlying { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quoteCurrency")]
        public string QuoteCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "commission")]
        public double? Commission { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "initMarginReq")]
        public double? InitMarginReq { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maintMarginReq")]
        public double? MaintMarginReq { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "riskLimit")]
        public double? RiskLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "leverage")]
        public double? Leverage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "crossMargin")]
        public bool? CrossMargin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deleveragePercentile")]
        public double? DeleveragePercentile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rebalancedPnl")]
        public double? RebalancedPnl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prevRealisedPnl")]
        public double? PrevRealisedPnl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prevUnrealisedPnl")]
        public double? PrevUnrealisedPnl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prevClosePrice")]
        public double? PrevClosePrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openingTimestamp")]
        public System.DateTime? OpeningTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openingQty")]
        public double? OpeningQty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openingCost")]
        public double? OpeningCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openingComm")]
        public double? OpeningComm { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openOrderBuyQty")]
        public double? OpenOrderBuyQty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openOrderBuyCost")]
        public double? OpenOrderBuyCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openOrderBuyPremium")]
        public double? OpenOrderBuyPremium { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openOrderSellQty")]
        public double? OpenOrderSellQty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openOrderSellCost")]
        public double? OpenOrderSellCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "openOrderSellPremium")]
        public double? OpenOrderSellPremium { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "execBuyQty")]
        public double? ExecBuyQty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "execBuyCost")]
        public double? ExecBuyCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "execSellQty")]
        public double? ExecSellQty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "execSellCost")]
        public double? ExecSellCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "execQty")]
        public double? ExecQty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "execCost")]
        public double? ExecCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "execComm")]
        public double? ExecComm { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currentTimestamp")]
        public System.DateTime? CurrentTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currentQty")]
        public double? CurrentQty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currentCost")]
        public double? CurrentCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currentComm")]
        public double? CurrentComm { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "realisedCost")]
        public double? RealisedCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unrealisedCost")]
        public double? UnrealisedCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "grossOpenCost")]
        public double? GrossOpenCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "grossOpenPremium")]
        public double? GrossOpenPremium { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "grossExecCost")]
        public double? GrossExecCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isOpen")]
        public bool? IsOpen { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "markPrice")]
        public double? MarkPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "markValue")]
        public double? MarkValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "riskValue")]
        public double? RiskValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "homeNotional")]
        public double? HomeNotional { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "foreignNotional")]
        public double? ForeignNotional { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "posState")]
        public string PosState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "posCost")]
        public double? PosCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "posCost2")]
        public double? PosCost2 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "posCross")]
        public double? PosCross { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "posInit")]
        public double? PosInit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "posComm")]
        public double? PosComm { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "posLoss")]
        public double? PosLoss { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "posMargin")]
        public double? PosMargin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "posMaint")]
        public double? PosMaint { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "posAllowance")]
        public double? PosAllowance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxableMargin")]
        public double? TaxableMargin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "initMargin")]
        public double? InitMargin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maintMargin")]
        public double? MaintMargin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sessionMargin")]
        public double? SessionMargin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "targetExcessMargin")]
        public double? TargetExcessMargin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "varMargin")]
        public double? VarMargin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "realisedGrossPnl")]
        public double? RealisedGrossPnl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "realisedTax")]
        public double? RealisedTax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "realisedPnl")]
        public double? RealisedPnl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unrealisedGrossPnl")]
        public double? UnrealisedGrossPnl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "longBankrupt")]
        public double? LongBankrupt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shortBankrupt")]
        public double? ShortBankrupt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxBase")]
        public double? TaxBase { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "indicativeTaxRate")]
        public double? IndicativeTaxRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "indicativeTax")]
        public double? IndicativeTax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unrealisedTax")]
        public double? UnrealisedTax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unrealisedPnl")]
        public double? UnrealisedPnl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unrealisedPnlPcnt")]
        public double? UnrealisedPnlPcnt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unrealisedRoePcnt")]
        public double? UnrealisedRoePcnt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "simpleQty")]
        public double? SimpleQty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "simpleCost")]
        public double? SimpleCost { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "simpleValue")]
        public double? SimpleValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "simplePnl")]
        public double? SimplePnl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "simplePnlPcnt")]
        public double? SimplePnlPcnt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "avgCostPrice")]
        public double? AvgCostPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "avgEntryPrice")]
        public double? AvgEntryPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "breakEvenPrice")]
        public double? BreakEvenPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "marginCallPrice")]
        public double? MarginCallPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "liquidationPrice")]
        public double? LiquidationPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bankruptPrice")]
        public double? BankruptPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastPrice")]
        public double? LastPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastValue")]
        public double? LastValue { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Symbol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Symbol");
            }
            if (Currency == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Currency");
            }
        }
    }
}
