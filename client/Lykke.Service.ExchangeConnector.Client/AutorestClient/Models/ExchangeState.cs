// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ExchangeConnector.Client.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ExchangeState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ExchangeState
    {
        [EnumMember(Value = "Initializing")]
        Initializing,
        [EnumMember(Value = "Connecting")]
        Connecting,
        [EnumMember(Value = "ReconnectingAfterError")]
        ReconnectingAfterError,
        [EnumMember(Value = "Connected")]
        Connected,
        [EnumMember(Value = "ReceivingPrices")]
        ReceivingPrices,
        [EnumMember(Value = "ExecuteOrders")]
        ExecuteOrders,
        [EnumMember(Value = "ErrorState")]
        ErrorState,
        [EnumMember(Value = "Stopped")]
        Stopped,
        [EnumMember(Value = "Stopping")]
        Stopping
    }
    internal static class ExchangeStateEnumExtension
    {
        internal static string ToSerializedValue(this ExchangeState? value)
        {
            return value == null ? null : ((ExchangeState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ExchangeState value)
        {
            switch( value )
            {
                case ExchangeState.Initializing:
                    return "Initializing";
                case ExchangeState.Connecting:
                    return "Connecting";
                case ExchangeState.ReconnectingAfterError:
                    return "ReconnectingAfterError";
                case ExchangeState.Connected:
                    return "Connected";
                case ExchangeState.ReceivingPrices:
                    return "ReceivingPrices";
                case ExchangeState.ExecuteOrders:
                    return "ExecuteOrders";
                case ExchangeState.ErrorState:
                    return "ErrorState";
                case ExchangeState.Stopped:
                    return "Stopped";
                case ExchangeState.Stopping:
                    return "Stopping";
            }
            return null;
        }

        internal static ExchangeState? ParseExchangeState(this string value)
        {
            switch( value )
            {
                case "Initializing":
                    return ExchangeState.Initializing;
                case "Connecting":
                    return ExchangeState.Connecting;
                case "ReconnectingAfterError":
                    return ExchangeState.ReconnectingAfterError;
                case "Connected":
                    return ExchangeState.Connected;
                case "ReceivingPrices":
                    return ExchangeState.ReceivingPrices;
                case "ExecuteOrders":
                    return ExchangeState.ExecuteOrders;
                case "ErrorState":
                    return ExchangeState.ErrorState;
                case "Stopped":
                    return ExchangeState.Stopped;
                case "Stopping":
                    return ExchangeState.Stopping;
            }
            return null;
        }
    }
}
