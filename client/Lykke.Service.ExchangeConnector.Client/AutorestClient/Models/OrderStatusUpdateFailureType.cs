// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ExchangeConnector.Client.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for OrderStatusUpdateFailureType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum OrderStatusUpdateFailureType
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "Unknown")]
        Unknown,
        [EnumMember(Value = "ExchangeError")]
        ExchangeError,
        [EnumMember(Value = "ConnectorError")]
        ConnectorError,
        [EnumMember(Value = "InsufficientFunds")]
        InsufficientFunds
    }
    internal static class OrderStatusUpdateFailureTypeEnumExtension
    {
        internal static string ToSerializedValue(this OrderStatusUpdateFailureType? value)
        {
            return value == null ? null : ((OrderStatusUpdateFailureType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this OrderStatusUpdateFailureType value)
        {
            switch( value )
            {
                case OrderStatusUpdateFailureType.None:
                    return "None";
                case OrderStatusUpdateFailureType.Unknown:
                    return "Unknown";
                case OrderStatusUpdateFailureType.ExchangeError:
                    return "ExchangeError";
                case OrderStatusUpdateFailureType.ConnectorError:
                    return "ConnectorError";
                case OrderStatusUpdateFailureType.InsufficientFunds:
                    return "InsufficientFunds";
            }
            return null;
        }

        internal static OrderStatusUpdateFailureType? ParseOrderStatusUpdateFailureType(this string value)
        {
            switch( value )
            {
                case "None":
                    return OrderStatusUpdateFailureType.None;
                case "Unknown":
                    return OrderStatusUpdateFailureType.Unknown;
                case "ExchangeError":
                    return OrderStatusUpdateFailureType.ExchangeError;
                case "ConnectorError":
                    return OrderStatusUpdateFailureType.ConnectorError;
                case "InsufficientFunds":
                    return OrderStatusUpdateFailureType.InsufficientFunds;
            }
            return null;
        }
    }
}
