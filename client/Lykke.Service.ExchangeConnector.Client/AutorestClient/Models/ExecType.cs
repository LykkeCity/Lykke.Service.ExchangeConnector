// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ExchangeConnector.Client.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ExecType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ExecType
    {
        [EnumMember(Value = "Unknown")]
        Unknown,
        [EnumMember(Value = "New")]
        New,
        [EnumMember(Value = "PartialFill")]
        PartialFill,
        [EnumMember(Value = "Fill")]
        Fill,
        [EnumMember(Value = "DoneForDay")]
        DoneForDay,
        [EnumMember(Value = "Cancelled")]
        Cancelled,
        [EnumMember(Value = "Replace")]
        Replace,
        [EnumMember(Value = "PendingCancel")]
        PendingCancel,
        [EnumMember(Value = "Stopped")]
        Stopped,
        [EnumMember(Value = "Rejected")]
        Rejected,
        [EnumMember(Value = "Suspended")]
        Suspended,
        [EnumMember(Value = "PendingNew")]
        PendingNew,
        [EnumMember(Value = "Calculated")]
        Calculated,
        [EnumMember(Value = "Expired")]
        Expired,
        [EnumMember(Value = "Restarted")]
        Restarted,
        [EnumMember(Value = "PendingReplace")]
        PendingReplace,
        [EnumMember(Value = "Trade")]
        Trade,
        [EnumMember(Value = "TradeCorrect")]
        TradeCorrect,
        [EnumMember(Value = "TradeCancel")]
        TradeCancel,
        [EnumMember(Value = "OrderStatus")]
        OrderStatus
    }
    internal static class ExecTypeEnumExtension
    {
        internal static string ToSerializedValue(this ExecType? value)
        {
            return value == null ? null : ((ExecType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ExecType value)
        {
            switch( value )
            {
                case ExecType.Unknown:
                    return "Unknown";
                case ExecType.New:
                    return "New";
                case ExecType.PartialFill:
                    return "PartialFill";
                case ExecType.Fill:
                    return "Fill";
                case ExecType.DoneForDay:
                    return "DoneForDay";
                case ExecType.Cancelled:
                    return "Cancelled";
                case ExecType.Replace:
                    return "Replace";
                case ExecType.PendingCancel:
                    return "PendingCancel";
                case ExecType.Stopped:
                    return "Stopped";
                case ExecType.Rejected:
                    return "Rejected";
                case ExecType.Suspended:
                    return "Suspended";
                case ExecType.PendingNew:
                    return "PendingNew";
                case ExecType.Calculated:
                    return "Calculated";
                case ExecType.Expired:
                    return "Expired";
                case ExecType.Restarted:
                    return "Restarted";
                case ExecType.PendingReplace:
                    return "PendingReplace";
                case ExecType.Trade:
                    return "Trade";
                case ExecType.TradeCorrect:
                    return "TradeCorrect";
                case ExecType.TradeCancel:
                    return "TradeCancel";
                case ExecType.OrderStatus:
                    return "OrderStatus";
            }
            return null;
        }

        internal static ExecType? ParseExecType(this string value)
        {
            switch( value )
            {
                case "Unknown":
                    return ExecType.Unknown;
                case "New":
                    return ExecType.New;
                case "PartialFill":
                    return ExecType.PartialFill;
                case "Fill":
                    return ExecType.Fill;
                case "DoneForDay":
                    return ExecType.DoneForDay;
                case "Cancelled":
                    return ExecType.Cancelled;
                case "Replace":
                    return ExecType.Replace;
                case "PendingCancel":
                    return ExecType.PendingCancel;
                case "Stopped":
                    return ExecType.Stopped;
                case "Rejected":
                    return ExecType.Rejected;
                case "Suspended":
                    return ExecType.Suspended;
                case "PendingNew":
                    return ExecType.PendingNew;
                case "Calculated":
                    return ExecType.Calculated;
                case "Expired":
                    return ExecType.Expired;
                case "Restarted":
                    return ExecType.Restarted;
                case "PendingReplace":
                    return ExecType.PendingReplace;
                case "Trade":
                    return ExecType.Trade;
                case "TradeCorrect":
                    return ExecType.TradeCorrect;
                case "TradeCancel":
                    return ExecType.TradeCancel;
                case "OrderStatus":
                    return ExecType.OrderStatus;
            }
            return null;
        }
    }
}
