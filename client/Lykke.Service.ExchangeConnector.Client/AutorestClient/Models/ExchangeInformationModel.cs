// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ExchangeConnector.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ExchangeInformationModel
    {
        /// <summary>
        /// Initializes a new instance of the ExchangeInformationModel class.
        /// </summary>
        public ExchangeInformationModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExchangeInformationModel class.
        /// </summary>
        /// <param name="state">Possible values include: 'Initializing',
        /// 'Connecting', 'ReconnectingAfterError', 'Connected',
        /// 'ReceivingPrices', 'ExecuteOrders', 'ErrorState', 'Stopped',
        /// 'Stopping'</param>
        public ExchangeInformationModel(ExchangeState state, string name = default(string), IList<Instrument> instruments = default(IList<Instrument>))
        {
            Name = name;
            Instruments = instruments;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "instruments")]
        public IList<Instrument> Instruments { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Initializing', 'Connecting',
        /// 'ReconnectingAfterError', 'Connected', 'ReceivingPrices',
        /// 'ExecuteOrders', 'ErrorState', 'Stopped', 'Stopping'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public ExchangeState State { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
